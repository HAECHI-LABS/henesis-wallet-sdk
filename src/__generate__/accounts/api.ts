/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://dev.wallet.henesis.io/docs/v2/accounts".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccessTokenDTO
 */
export interface AccessTokenDTO {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDTO
     */
    accessToken: string;
}

/**
 * 
 * @export
 * @interface AccountDTO
 */
export interface AccountDTO {
    /**
     * 
     * @type {string}
     * @memberof AccountDTO
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDTO
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDTO
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDTO
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDTO
     */
    organizationId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountDTO
     */
    roles: Array<AccountDTO.RolesEnum>;
}

/**
 * @export
 * @namespace AccountDTO
 */
export namespace AccountDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum RolesEnum {
        COIN = <any> 'COIN',
        VIEWER = <any> 'VIEWER',
        ADMIN = <any> 'ADMIN',
        HAECHI = <any> 'HAECHI'
    }
}

/**
 * 
 * @export
 * @interface ChangeAccountNameRequest
 */
export interface ChangeAccountNameRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeAccountNameRequest
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeAccountNameRequest
     */
    lastName: string;
}

/**
 * 
 * @export
 * @interface CreateAccessTokenRequest
 */
export interface CreateAccessTokenRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateAccessTokenRequest
     */
    expiresIn: number;
}

/**
 * 
 * @export
 * @interface CreateOrganizationRequest
 */
export interface CreateOrganizationRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    name: string;
}

/**
 * 
 * @export
 * @interface CreateSecretResponse
 */
export interface CreateSecretResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateSecretResponse
     */
    secret: string;
}

/**
 * 
 * @export
 * @interface IdentityDTO
 */
export interface IdentityDTO {
    /**
     * 
     * @type {string}
     * @memberof IdentityDTO
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityDTO
     */
    accountId: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityDTO
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityDTO
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityDTO
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityDTO
     */
    organizationSecret: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityDTO
     */
    otpKey: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdentityDTO
     */
    roles: Array<IdentityDTO.RolesEnum>;
}

/**
 * @export
 * @namespace IdentityDTO
 */
export namespace IdentityDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum RolesEnum {
        COIN = <any> 'COIN',
        VIEWER = <any> 'VIEWER',
        ADMIN = <any> 'ADMIN',
        HAECHI = <any> 'HAECHI'
    }
}

/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    href?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Link
     */
    templated?: boolean;
}

/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    otpCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}

/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    organizationId: string;
    /**
     * 
     * @type {OTPDTO}
     * @memberof LoginResponse
     */
    otp: OTPDTO;
    /**
     * 
     * @type {Array<string>}
     * @memberof LoginResponse
     */
    roles: Array<LoginResponse.RolesEnum>;
}

/**
 * @export
 * @namespace LoginResponse
 */
export namespace LoginResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum RolesEnum {
        COIN = <any> 'COIN',
        VIEWER = <any> 'VIEWER',
        ADMIN = <any> 'ADMIN',
        HAECHI = <any> 'HAECHI'
    }
}

/**
 * 
 * @export
 * @interface MapstringLink
 */
export interface MapstringLink {
    [key: string]: Link;

}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _100CONTINUE = <any> '100 CONTINUE',
        _101SWITCHINGPROTOCOLS = <any> '101 SWITCHING_PROTOCOLS',
        _102PROCESSING = <any> '102 PROCESSING',
        _103CHECKPOINT = <any> '103 CHECKPOINT',
        _200OK = <any> '200 OK',
        _201CREATED = <any> '201 CREATED',
        _202ACCEPTED = <any> '202 ACCEPTED',
        _203NONAUTHORITATIVEINFORMATION = <any> '203 NON_AUTHORITATIVE_INFORMATION',
        _204NOCONTENT = <any> '204 NO_CONTENT',
        _205RESETCONTENT = <any> '205 RESET_CONTENT',
        _206PARTIALCONTENT = <any> '206 PARTIAL_CONTENT',
        _207MULTISTATUS = <any> '207 MULTI_STATUS',
        _208ALREADYREPORTED = <any> '208 ALREADY_REPORTED',
        _226IMUSED = <any> '226 IM_USED',
        _300MULTIPLECHOICES = <any> '300 MULTIPLE_CHOICES',
        _301MOVEDPERMANENTLY = <any> '301 MOVED_PERMANENTLY',
        _302FOUND = <any> '302 FOUND',
        _302MOVEDTEMPORARILY = <any> '302 MOVED_TEMPORARILY',
        _303SEEOTHER = <any> '303 SEE_OTHER',
        _304NOTMODIFIED = <any> '304 NOT_MODIFIED',
        _305USEPROXY = <any> '305 USE_PROXY',
        _307TEMPORARYREDIRECT = <any> '307 TEMPORARY_REDIRECT',
        _308PERMANENTREDIRECT = <any> '308 PERMANENT_REDIRECT',
        _400BADREQUEST = <any> '400 BAD_REQUEST',
        _401UNAUTHORIZED = <any> '401 UNAUTHORIZED',
        _402PAYMENTREQUIRED = <any> '402 PAYMENT_REQUIRED',
        _403FORBIDDEN = <any> '403 FORBIDDEN',
        _404NOTFOUND = <any> '404 NOT_FOUND',
        _405METHODNOTALLOWED = <any> '405 METHOD_NOT_ALLOWED',
        _406NOTACCEPTABLE = <any> '406 NOT_ACCEPTABLE',
        _407PROXYAUTHENTICATIONREQUIRED = <any> '407 PROXY_AUTHENTICATION_REQUIRED',
        _408REQUESTTIMEOUT = <any> '408 REQUEST_TIMEOUT',
        _409CONFLICT = <any> '409 CONFLICT',
        _410GONE = <any> '410 GONE',
        _411LENGTHREQUIRED = <any> '411 LENGTH_REQUIRED',
        _412PRECONDITIONFAILED = <any> '412 PRECONDITION_FAILED',
        _413PAYLOADTOOLARGE = <any> '413 PAYLOAD_TOO_LARGE',
        _413REQUESTENTITYTOOLARGE = <any> '413 REQUEST_ENTITY_TOO_LARGE',
        _414URITOOLONG = <any> '414 URI_TOO_LONG',
        _414REQUESTURITOOLONG = <any> '414 REQUEST_URI_TOO_LONG',
        _415UNSUPPORTEDMEDIATYPE = <any> '415 UNSUPPORTED_MEDIA_TYPE',
        _416REQUESTEDRANGENOTSATISFIABLE = <any> '416 REQUESTED_RANGE_NOT_SATISFIABLE',
        _417EXPECTATIONFAILED = <any> '417 EXPECTATION_FAILED',
        _418IAMATEAPOT = <any> '418 I_AM_A_TEAPOT',
        _419INSUFFICIENTSPACEONRESOURCE = <any> '419 INSUFFICIENT_SPACE_ON_RESOURCE',
        _420METHODFAILURE = <any> '420 METHOD_FAILURE',
        _421DESTINATIONLOCKED = <any> '421 DESTINATION_LOCKED',
        _422UNPROCESSABLEENTITY = <any> '422 UNPROCESSABLE_ENTITY',
        _423LOCKED = <any> '423 LOCKED',
        _424FAILEDDEPENDENCY = <any> '424 FAILED_DEPENDENCY',
        _425TOOEARLY = <any> '425 TOO_EARLY',
        _426UPGRADEREQUIRED = <any> '426 UPGRADE_REQUIRED',
        _428PRECONDITIONREQUIRED = <any> '428 PRECONDITION_REQUIRED',
        _429TOOMANYREQUESTS = <any> '429 TOO_MANY_REQUESTS',
        _431REQUESTHEADERFIELDSTOOLARGE = <any> '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
        _451UNAVAILABLEFORLEGALREASONS = <any> '451 UNAVAILABLE_FOR_LEGAL_REASONS',
        _500INTERNALSERVERERROR = <any> '500 INTERNAL_SERVER_ERROR',
        _501NOTIMPLEMENTED = <any> '501 NOT_IMPLEMENTED',
        _502BADGATEWAY = <any> '502 BAD_GATEWAY',
        _503SERVICEUNAVAILABLE = <any> '503 SERVICE_UNAVAILABLE',
        _504GATEWAYTIMEOUT = <any> '504 GATEWAY_TIMEOUT',
        _505HTTPVERSIONNOTSUPPORTED = <any> '505 HTTP_VERSION_NOT_SUPPORTED',
        _506VARIANTALSONEGOTIATES = <any> '506 VARIANT_ALSO_NEGOTIATES',
        _507INSUFFICIENTSTORAGE = <any> '507 INSUFFICIENT_STORAGE',
        _508LOOPDETECTED = <any> '508 LOOP_DETECTED',
        _509BANDWIDTHLIMITEXCEEDED = <any> '509 BANDWIDTH_LIMIT_EXCEEDED',
        _510NOTEXTENDED = <any> '510 NOT_EXTENDED',
        _511NETWORKAUTHENTICATIONREQUIRED = <any> '511 NETWORK_AUTHENTICATION_REQUIRED'
    }
}

/**
 * 
 * @export
 * @interface OTPDTO
 */
export interface OTPDTO {
    /**
     * 
     * @type {string}
     * @memberof OTPDTO
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof OTPDTO
     */
    url: string;
}

/**
 * 
 * @export
 * @interface OrgAccountDTO
 */
export interface OrgAccountDTO {
    /**
     * 
     * @type {string}
     * @memberof OrgAccountDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAccountDTO
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAccountDTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAccountDTO
     */
    lastName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAccountDTO
     */
    roles: Array<OrgAccountDTO.RolesEnum>;
}

/**
 * @export
 * @namespace OrgAccountDTO
 */
export namespace OrgAccountDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum RolesEnum {
        COIN = <any> 'COIN',
        VIEWER = <any> 'VIEWER',
        ADMIN = <any> 'ADMIN',
        HAECHI = <any> 'HAECHI'
    }
}

/**
 * 
 * @export
 * @interface OrganizationDTO
 */
export interface OrganizationDTO {
    /**
     * 
     * @type {string}
     * @memberof OrganizationDTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDTO
     */
    secret: string;
}

/**
 * 
 * @export
 * @interface PatchAccountRoleRequest
 */
export interface PatchAccountRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchAccountRoleRequest
     */
    otpCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchAccountRoleRequest
     */
    role: string;
}

/**
 * 
 * @export
 * @interface RefreshAccessTokenRequest
 */
export interface RefreshAccessTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshAccessTokenRequest
     */
    otpCode?: string;
}

/**
 * 
 * @export
 * @interface SignUpRequest
 */
export interface SignUpRequest {
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    role: string;
}

/**
 * 
 * @export
 * @interface SignUpResponse
 */
export interface SignUpResponse {
    /**
     * 
     * @type {string}
     * @memberof SignUpResponse
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpResponse
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpResponse
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpResponse
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpResponse
     */
    organizationId: string;
}

/**
 * 
 * @export
 * @interface UpdateOTPInitializeRequest
 */
export interface UpdateOTPInitializeRequest {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOTPInitializeRequest
     */
    initialize: boolean;
}

/**
 * 
 * @export
 * @interface UpdateOrganizationRequest
 */
export interface UpdateOrganizationRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    newOrgId: string;
}

/**
 * 
 * @export
 * @interface UpdatePasswordRequest
 */
export interface UpdatePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordRequest
     */
    newPassword: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordRequest
     */
    otpCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordRequest
     */
    password: string;
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}


/**
 * AccountControllerApi - fetch parameter creator
 * @export
 */
export const AccountControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary changeAccountName
         * @param {ChangeAccountNameRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccountNameUsingPATCH(request: ChangeAccountNameRequest, accountId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling changeAccountNameUsingPATCH.');
            }
            const localVarPath = `/api/v2/accounts/name`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangeAccountNameRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessTokenUsingGET(accountId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/accounts/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accountId || {}) : (accountId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessTokenUsingDELETE(accountId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/accounts/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accountId || {}) : (accountId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessTokenUsingGET(accountId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/accounts/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accountId || {}) : (accountId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary login
         * @param {LoginRequest} request request
         * @param {string} [browser] 
         * @param {string} [ip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(request: LoginRequest, browser?: string, ip?: string, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling loginUsingPOST.');
            }
            const localVarPath = `/api/v2/accounts/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (browser !== undefined) {
                localVarQueryParameter['browser'] = browser;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary refreshShortAccessToken
         * @param {RefreshAccessTokenRequest} request request
         * @param {'short'} type 
         * @param {string} [accountId] accountId
         * @param {boolean} [needOTP] needOTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshShortAccessTokenUsingPOST(request: RefreshAccessTokenRequest, type: 'short', accountId?: string, needOTP?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling refreshShortAccessTokenUsingPOST.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling refreshShortAccessTokenUsingPOST.');
            }
            const localVarPath = `/api/v2/accounts/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RefreshAccessTokenRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary register
         * @param {SignUpRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST(request: SignUpRequest, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling registerUsingPOST.');
            }
            const localVarPath = `/api/v2/accounts/signup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignUpRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOTPInitialize
         * @param {UpdateOTPInitializeRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOTPInitializeUsingPATCH(request: UpdateOTPInitializeRequest, accountId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateOTPInitializeUsingPATCH.');
            }
            const localVarPath = `/api/v2/accounts/otp-initialize`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateOTPInitializeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganization
         * @param {UpdateOrganizationRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUsingPATCH(request: UpdateOrganizationRequest, accountId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateOrganizationUsingPATCH.');
            }
            const localVarPath = `/api/v2/accounts/organization`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateOrganizationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatePassword
         * @param {UpdatePasswordRequest} request request
         * @param {string} [accountId] accountId
         * @param {boolean} [needOTP] needOTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordUsingPATCH(request: UpdatePasswordRequest, accountId?: string, needOTP?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updatePasswordUsingPATCH.');
            }
            const localVarPath = `/api/v2/accounts/password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdatePasswordRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary verifyIP
         * @param {string} identifier identifier
         * @param {string} [browser] 
         * @param {string} [ip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyIPUsingGET(identifier: string, browser?: string, ip?: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling verifyIPUsingGET.');
            }
            const localVarPath = `/api/v2/accounts/login/verify`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (browser !== undefined) {
                localVarQueryParameter['browser'] = browser;
            }

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountControllerApi - functional programming interface
 * @export
 */
export const AccountControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary changeAccountName
         * @param {ChangeAccountNameRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccountNameUsingPATCH(request: ChangeAccountNameRequest, accountId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountDTO> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).changeAccountNameUsingPATCH(request, accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary createAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessTokenUsingGET(accountId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountDTO> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).createAccessTokenUsingGET(accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary deleteAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessTokenUsingDELETE(accountId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).deleteAccessTokenUsingDELETE(accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessTokenUsingGET(accountId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccessTokenDTO> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).getAccessTokenUsingGET(accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary login
         * @param {LoginRequest} request request
         * @param {string} [browser] 
         * @param {string} [ip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(request: LoginRequest, browser?: string, ip?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginResponse> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).loginUsingPOST(request, browser, ip, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary refreshShortAccessToken
         * @param {RefreshAccessTokenRequest} request request
         * @param {'short'} type 
         * @param {string} [accountId] accountId
         * @param {boolean} [needOTP] needOTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshShortAccessTokenUsingPOST(request: RefreshAccessTokenRequest, type: 'short', accountId?: string, needOTP?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccessTokenDTO> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).refreshShortAccessTokenUsingPOST(request, type, accountId, needOTP, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary register
         * @param {SignUpRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST(request: SignUpRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignUpResponse> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).registerUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary updateOTPInitialize
         * @param {UpdateOTPInitializeRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOTPInitializeUsingPATCH(request: UpdateOTPInitializeRequest, accountId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).updateOTPInitializeUsingPATCH(request, accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary updateOrganization
         * @param {UpdateOrganizationRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUsingPATCH(request: UpdateOrganizationRequest, accountId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).updateOrganizationUsingPATCH(request, accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary updatePassword
         * @param {UpdatePasswordRequest} request request
         * @param {string} [accountId] accountId
         * @param {boolean} [needOTP] needOTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordUsingPATCH(request: UpdatePasswordRequest, accountId?: string, needOTP?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).updatePasswordUsingPATCH(request, accountId, needOTP, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary verifyIP
         * @param {string} identifier identifier
         * @param {string} [browser] 
         * @param {string} [ip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyIPUsingGET(identifier: string, browser?: string, ip?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountControllerApiFetchParamCreator(configuration).verifyIPUsingGET(identifier, browser, ip, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountControllerApi - factory interface
 * @export
 */
export const AccountControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary changeAccountName
         * @param {ChangeAccountNameRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAccountNameUsingPATCH(request: ChangeAccountNameRequest, accountId?: string, options?: any) {
            return AccountControllerApiFp(configuration).changeAccountNameUsingPATCH(request, accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary createAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessTokenUsingGET(accountId?: string, options?: any) {
            return AccountControllerApiFp(configuration).createAccessTokenUsingGET(accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary deleteAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessTokenUsingDELETE(accountId?: string, options?: any) {
            return AccountControllerApiFp(configuration).deleteAccessTokenUsingDELETE(accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getAccessToken
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessTokenUsingGET(accountId?: string, options?: any) {
            return AccountControllerApiFp(configuration).getAccessTokenUsingGET(accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary login
         * @param {LoginRequest} request request
         * @param {string} [browser] 
         * @param {string} [ip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(request: LoginRequest, browser?: string, ip?: string, options?: any) {
            return AccountControllerApiFp(configuration).loginUsingPOST(request, browser, ip, options)(fetch, basePath);
        },
        /**
         * 
         * @summary refreshShortAccessToken
         * @param {RefreshAccessTokenRequest} request request
         * @param {'short'} type 
         * @param {string} [accountId] accountId
         * @param {boolean} [needOTP] needOTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshShortAccessTokenUsingPOST(request: RefreshAccessTokenRequest, type: 'short', accountId?: string, needOTP?: boolean, options?: any) {
            return AccountControllerApiFp(configuration).refreshShortAccessTokenUsingPOST(request, type, accountId, needOTP, options)(fetch, basePath);
        },
        /**
         * 
         * @summary register
         * @param {SignUpRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST(request: SignUpRequest, options?: any) {
            return AccountControllerApiFp(configuration).registerUsingPOST(request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary updateOTPInitialize
         * @param {UpdateOTPInitializeRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOTPInitializeUsingPATCH(request: UpdateOTPInitializeRequest, accountId?: string, options?: any) {
            return AccountControllerApiFp(configuration).updateOTPInitializeUsingPATCH(request, accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary updateOrganization
         * @param {UpdateOrganizationRequest} request request
         * @param {string} [accountId] accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUsingPATCH(request: UpdateOrganizationRequest, accountId?: string, options?: any) {
            return AccountControllerApiFp(configuration).updateOrganizationUsingPATCH(request, accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary updatePassword
         * @param {UpdatePasswordRequest} request request
         * @param {string} [accountId] accountId
         * @param {boolean} [needOTP] needOTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordUsingPATCH(request: UpdatePasswordRequest, accountId?: string, needOTP?: boolean, options?: any) {
            return AccountControllerApiFp(configuration).updatePasswordUsingPATCH(request, accountId, needOTP, options)(fetch, basePath);
        },
        /**
         * 
         * @summary verifyIP
         * @param {string} identifier identifier
         * @param {string} [browser] 
         * @param {string} [ip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyIPUsingGET(identifier: string, browser?: string, ip?: string, options?: any) {
            return AccountControllerApiFp(configuration).verifyIPUsingGET(identifier, browser, ip, options)(fetch, basePath);
        },
    };
};

/**
 * AccountControllerApi - object-oriented interface
 * @export
 * @class AccountControllerApi
 * @extends {BaseAPI}
 */
export class AccountControllerApi extends BaseAPI {
    /**
     * 
     * @summary changeAccountName
     * @param {ChangeAccountNameRequest} request request
     * @param {string} [accountId] accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public changeAccountNameUsingPATCH(request: ChangeAccountNameRequest, accountId?: string, options?: any) {
        return AccountControllerApiFp(this.configuration).changeAccountNameUsingPATCH(request, accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary createAccessToken
     * @param {string} [accountId] accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public createAccessTokenUsingGET(accountId?: string, options?: any) {
        return AccountControllerApiFp(this.configuration).createAccessTokenUsingGET(accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary deleteAccessToken
     * @param {string} [accountId] accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public deleteAccessTokenUsingDELETE(accountId?: string, options?: any) {
        return AccountControllerApiFp(this.configuration).deleteAccessTokenUsingDELETE(accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getAccessToken
     * @param {string} [accountId] accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public getAccessTokenUsingGET(accountId?: string, options?: any) {
        return AccountControllerApiFp(this.configuration).getAccessTokenUsingGET(accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary login
     * @param {LoginRequest} request request
     * @param {string} [browser] 
     * @param {string} [ip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public loginUsingPOST(request: LoginRequest, browser?: string, ip?: string, options?: any) {
        return AccountControllerApiFp(this.configuration).loginUsingPOST(request, browser, ip, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary refreshShortAccessToken
     * @param {RefreshAccessTokenRequest} request request
     * @param {'short'} type 
     * @param {string} [accountId] accountId
     * @param {boolean} [needOTP] needOTP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public refreshShortAccessTokenUsingPOST(request: RefreshAccessTokenRequest, type: 'short', accountId?: string, needOTP?: boolean, options?: any) {
        return AccountControllerApiFp(this.configuration).refreshShortAccessTokenUsingPOST(request, type, accountId, needOTP, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary register
     * @param {SignUpRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public registerUsingPOST(request: SignUpRequest, options?: any) {
        return AccountControllerApiFp(this.configuration).registerUsingPOST(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary updateOTPInitialize
     * @param {UpdateOTPInitializeRequest} request request
     * @param {string} [accountId] accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public updateOTPInitializeUsingPATCH(request: UpdateOTPInitializeRequest, accountId?: string, options?: any) {
        return AccountControllerApiFp(this.configuration).updateOTPInitializeUsingPATCH(request, accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary updateOrganization
     * @param {UpdateOrganizationRequest} request request
     * @param {string} [accountId] accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public updateOrganizationUsingPATCH(request: UpdateOrganizationRequest, accountId?: string, options?: any) {
        return AccountControllerApiFp(this.configuration).updateOrganizationUsingPATCH(request, accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary updatePassword
     * @param {UpdatePasswordRequest} request request
     * @param {string} [accountId] accountId
     * @param {boolean} [needOTP] needOTP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public updatePasswordUsingPATCH(request: UpdatePasswordRequest, accountId?: string, needOTP?: boolean, options?: any) {
        return AccountControllerApiFp(this.configuration).updatePasswordUsingPATCH(request, accountId, needOTP, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary verifyIP
     * @param {string} identifier identifier
     * @param {string} [browser] 
     * @param {string} [ip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public verifyIPUsingGET(identifier: string, browser?: string, ip?: string, options?: any) {
        return AccountControllerApiFp(this.configuration).verifyIPUsingGET(identifier, browser, ip, options)(this.fetch, this.basePath);
    }

}

/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * IdentityControllerApi - fetch parameter creator
 * @export
 */
export const IdentityControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getIdentity
         * @param {string} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityUsingGET(accountId: string, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getIdentityUsingGET.');
            }
            const localVarPath = `/api/v2/identities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityControllerApi - functional programming interface
 * @export
 */
export const IdentityControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getIdentity
         * @param {string} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityUsingGET(accountId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdentityDTO> {
            const localVarFetchArgs = IdentityControllerApiFetchParamCreator(configuration).getIdentityUsingGET(accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * IdentityControllerApi - factory interface
 * @export
 */
export const IdentityControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getIdentity
         * @param {string} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityUsingGET(accountId: string, options?: any) {
            return IdentityControllerApiFp(configuration).getIdentityUsingGET(accountId, options)(fetch, basePath);
        },
    };
};

/**
 * IdentityControllerApi - object-oriented interface
 * @export
 * @class IdentityControllerApi
 * @extends {BaseAPI}
 */
export class IdentityControllerApi extends BaseAPI {
    /**
     * 
     * @summary getIdentity
     * @param {string} accountId accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityControllerApi
     */
    public getIdentityUsingGET(accountId: string, options?: any) {
        return IdentityControllerApiFp(this.configuration).getIdentityUsingGET(accountId, options)(this.fetch, this.basePath);
    }

}

/**
 * OperationHandlerApi - fetch parameter creator
 * @export
 */
export const OperationHandlerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/actuator/health/**`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/actuator/health`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET2(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/actuator/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationHandlerApi - functional programming interface
 * @export
 */
export const OperationHandlerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OperationHandlerApiFetchParamCreator(configuration).handleUsingGET(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OperationHandlerApiFetchParamCreator(configuration).handleUsingGET1(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET2(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OperationHandlerApiFetchParamCreator(configuration).handleUsingGET2(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OperationHandlerApi - factory interface
 * @export
 */
export const OperationHandlerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET(body?: any, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(body?: any, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET1(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary handle
         * @param {any} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET2(body?: any, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET2(body, options)(fetch, basePath);
        },
    };
};

/**
 * OperationHandlerApi - object-oriented interface
 * @export
 * @class OperationHandlerApi
 * @extends {BaseAPI}
 */
export class OperationHandlerApi extends BaseAPI {
    /**
     * 
     * @summary handle
     * @param {any} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET(body?: any, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary handle
     * @param {any} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET1(body?: any, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET1(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary handle
     * @param {any} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET2(body?: any, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET2(body, options)(this.fetch, this.basePath);
    }

}

/**
 * OrganizationControllerApi - fetch parameter creator
 * @export
 */
export const OrganizationControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createOrganization
         * @param {CreateOrganizationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUsingPOST(request: CreateOrganizationRequest, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createOrganizationUsingPOST.');
            }
            const localVarPath = `/api/v2/organizations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateOrganizationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSecret
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecretUsingPOST(orgId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/organizations/secret`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(orgId || {}) : (orgId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAccountByOrganizationId
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByOrganizationIdUsingGET(orgId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/organizations/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(orgId || {}) : (orgId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganization
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsingGET(orgId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/organizations/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(orgId || {}) : (orgId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary patchAccountRole
         * @param {string} accountId accountId
         * @param {PatchAccountRoleRequest} patchAccountRoleRequest patchAccountRoleRequest
         * @param {string} [myAccountId] myAccountId
         * @param {boolean} [needOTP] needOTP
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAccountRoleUsingPATCH(accountId: string, patchAccountRoleRequest: PatchAccountRoleRequest, myAccountId?: string, needOTP?: boolean, orgId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling patchAccountRoleUsingPATCH.');
            }
            // verify required parameter 'patchAccountRoleRequest' is not null or undefined
            if (patchAccountRoleRequest === null || patchAccountRoleRequest === undefined) {
                throw new RequiredError('patchAccountRoleRequest','Required parameter patchAccountRoleRequest was null or undefined when calling patchAccountRoleUsingPATCH.');
            }
            const localVarPath = `/api/v2/organizations/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PatchAccountRoleRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(patchAccountRoleRequest || {}) : (patchAccountRoleRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export const OrganizationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createOrganization
         * @param {CreateOrganizationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUsingPOST(request: CreateOrganizationRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrganizationDTO> {
            const localVarFetchArgs = OrganizationControllerApiFetchParamCreator(configuration).createOrganizationUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary createSecret
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecretUsingPOST(orgId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateSecretResponse> {
            const localVarFetchArgs = OrganizationControllerApiFetchParamCreator(configuration).createSecretUsingPOST(orgId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getAccountByOrganizationId
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByOrganizationIdUsingGET(orgId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OrgAccountDTO>> {
            const localVarFetchArgs = OrganizationControllerApiFetchParamCreator(configuration).getAccountByOrganizationIdUsingGET(orgId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getOrganization
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsingGET(orgId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrganizationDTO> {
            const localVarFetchArgs = OrganizationControllerApiFetchParamCreator(configuration).getOrganizationUsingGET(orgId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary patchAccountRole
         * @param {string} accountId accountId
         * @param {PatchAccountRoleRequest} patchAccountRoleRequest patchAccountRoleRequest
         * @param {string} [myAccountId] myAccountId
         * @param {boolean} [needOTP] needOTP
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAccountRoleUsingPATCH(accountId: string, patchAccountRoleRequest: PatchAccountRoleRequest, myAccountId?: string, needOTP?: boolean, orgId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountDTO> {
            const localVarFetchArgs = OrganizationControllerApiFetchParamCreator(configuration).patchAccountRoleUsingPATCH(accountId, patchAccountRoleRequest, myAccountId, needOTP, orgId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export const OrganizationControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary createOrganization
         * @param {CreateOrganizationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUsingPOST(request: CreateOrganizationRequest, options?: any) {
            return OrganizationControllerApiFp(configuration).createOrganizationUsingPOST(request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary createSecret
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecretUsingPOST(orgId?: string, options?: any) {
            return OrganizationControllerApiFp(configuration).createSecretUsingPOST(orgId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getAccountByOrganizationId
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByOrganizationIdUsingGET(orgId?: string, options?: any) {
            return OrganizationControllerApiFp(configuration).getAccountByOrganizationIdUsingGET(orgId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getOrganization
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsingGET(orgId?: string, options?: any) {
            return OrganizationControllerApiFp(configuration).getOrganizationUsingGET(orgId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary patchAccountRole
         * @param {string} accountId accountId
         * @param {PatchAccountRoleRequest} patchAccountRoleRequest patchAccountRoleRequest
         * @param {string} [myAccountId] myAccountId
         * @param {boolean} [needOTP] needOTP
         * @param {string} [orgId] orgId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAccountRoleUsingPATCH(accountId: string, patchAccountRoleRequest: PatchAccountRoleRequest, myAccountId?: string, needOTP?: boolean, orgId?: string, options?: any) {
            return OrganizationControllerApiFp(configuration).patchAccountRoleUsingPATCH(accountId, patchAccountRoleRequest, myAccountId, needOTP, orgId, options)(fetch, basePath);
        },
    };
};

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationControllerApi extends BaseAPI {
    /**
     * 
     * @summary createOrganization
     * @param {CreateOrganizationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public createOrganizationUsingPOST(request: CreateOrganizationRequest, options?: any) {
        return OrganizationControllerApiFp(this.configuration).createOrganizationUsingPOST(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary createSecret
     * @param {string} [orgId] orgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public createSecretUsingPOST(orgId?: string, options?: any) {
        return OrganizationControllerApiFp(this.configuration).createSecretUsingPOST(orgId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getAccountByOrganizationId
     * @param {string} [orgId] orgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getAccountByOrganizationIdUsingGET(orgId?: string, options?: any) {
        return OrganizationControllerApiFp(this.configuration).getAccountByOrganizationIdUsingGET(orgId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getOrganization
     * @param {string} [orgId] orgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getOrganizationUsingGET(orgId?: string, options?: any) {
        return OrganizationControllerApiFp(this.configuration).getOrganizationUsingGET(orgId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary patchAccountRole
     * @param {string} accountId accountId
     * @param {PatchAccountRoleRequest} patchAccountRoleRequest patchAccountRoleRequest
     * @param {string} [myAccountId] myAccountId
     * @param {boolean} [needOTP] needOTP
     * @param {string} [orgId] orgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public patchAccountRoleUsingPATCH(accountId: string, patchAccountRoleRequest: PatchAccountRoleRequest, myAccountId?: string, needOTP?: boolean, orgId?: string, options?: any) {
        return OrganizationControllerApiFp(this.configuration).patchAccountRoleUsingPATCH(accountId, patchAccountRoleRequest, myAccountId, needOTP, orgId, options)(this.fetch, this.basePath);
    }

}

/**
 * WebMvcLinksHandlerApi - fetch parameter creator
 * @export
 */
export const WebMvcLinksHandlerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/actuator`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebMvcLinksHandlerApi - functional programming interface
 * @export
 */
export const WebMvcLinksHandlerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: { [key: string]: Link; }; }> {
            const localVarFetchArgs = WebMvcLinksHandlerApiFetchParamCreator(configuration).linksUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WebMvcLinksHandlerApi - factory interface
 * @export
 */
export const WebMvcLinksHandlerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET(options?: any) {
            return WebMvcLinksHandlerApiFp(configuration).linksUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * WebMvcLinksHandlerApi - object-oriented interface
 * @export
 * @class WebMvcLinksHandlerApi
 * @extends {BaseAPI}
 */
export class WebMvcLinksHandlerApi extends BaseAPI {
    /**
     * 
     * @summary links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebMvcLinksHandlerApi
     */
    public linksUsingGET(options?: any) {
        return WebMvcLinksHandlerApiFp(this.configuration).linksUsingGET(options)(this.fetch, this.basePath);
    }

}

