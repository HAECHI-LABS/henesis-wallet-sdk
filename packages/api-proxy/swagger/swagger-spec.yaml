openapi: 3.0.0
info:
  title: API PROXY
  description: The API PROXY description
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:3000
components:
  schemas:
    CoinDTO:
      type: object
      properties:
        id:
          type: number
          description: Henesis에서 부여한 Coin의 ID
          example: 11
        name:
          type: string
          description: 코인 이름
          example: ethereum
        ticker:
          type: string
          description: 코인의 기호
          example: ETH
        address:
          type: string
          description: 코인 컨트랙트 주소
          example: '0xdd00383e5a51166bba3e96d84c14a36d72e6c128'
        description:
          type: string
          description: 코인 설명
          example: 이더리움
        decimals:
          type: number
          description: 코인의 소수점 자릿수
          example: 18
        blockchain:
          description: 코인이 발행된 메인넷
          enum:
            - ETHEREUM
            - KLAYTN
            - BITCOIN
          type: string
        attributes:
          description: 코인의 메타 데이터
          type: array
          items:
            type: string
            enum:
              - ERC20_STANDARD
              - ERC20_NON_STANDARD_RETURN_TYPE
              - ERC20_REBASE
      required:
        - id
        - name
        - ticker
        - address
        - description
        - decimals
        - blockchain
        - attributes
    ValueTransferEventDTO:
      type: object
      properties:
        amount:
          type: string
          description: 암호화폐의 양
          example: '0x2386f26fc10000'
        decimals:
          type: number
          description: 암호화폐의 소수점 자릿수
          example: 18
        coinSymbol:
          type: string
          description: 암호화폐의 기호 (symbol)
          example: ETH
        from:
          type: string
          description: 출금 주소
          example: '0xd5fcc938ad42a56f1c60e7bd41f646ad844b2273'
        to:
          type: string
          description: 입금 주소
          example: '0xb659b6db08cdb7c24bd35b72222807c2567086f3'
        transferType:
          type: string
          description: 입출금 타입
          example: WITHDRAWAL
        walletName:
          type: string
          description: 해당 내역의 지갑 이름
          example: bit
        walletType:
          type: string
          description: 해당 내역의 지갑 종류
          example: MASTER_WALLET
        id:
          type: number
          description: 입출금/호출 내역의 ID
          example: 100393
        createdAt:
          type: string
          description: '트랜잭션 생성 시간 (형식: ms, UNIX time)'
          example: '1620056478365'
        updatedAt:
          type: string
          description: '트랜잭션 상태가 마지막으로 변경된 시간 (형식: ms, UNIX time)'
          example: '1620056481504'
        status:
          type: string
          description: 트랜잭션 상태
          example: CONFIRMED
        transactionHash:
          type: string
          description: 트랜잭션 해시
          example: '0xb53d099ca4ad755f3c66f0d64057eae26420d946241685a6745e2f09bc81cf7e'
        walletId:
          type: string
          description: 입출금 지갑 ID
          example: 98fa482e258bbd5cbac1393acef9e0e6
        transactionId:
          type: string
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          example: 2def027e99e906f8b912c691def10861
        orgId:
          type: string
          description: 지갑이 속한 팀(Org)의 ID
          example: 575a431dc73615a9e65648180bbd4fbb
        masterWalletId:
          type: string
          description: 입출금된 지갑이 속해있는 마스터 지갑 ID
          example: 98fa482e258bbd5cbac1393acef9e0e6
        confirmation:
          type: string
          description: 블록 컨펌 수 (16진법)
          example: '0x3ed'
      required:
        - amount
        - decimals
        - coinSymbol
        - from
        - to
        - transferType
        - walletName
        - walletType
        - id
        - createdAt
        - updatedAt
        - status
        - walletId
        - confirmation
    PaginationMetadata:
      type: object
      properties:
        nextUrl:
          type: string
          description: 다음 pagination url
          example: http://localhost:3000/api/v2/eth/value-transfer-events?page=2
        previousUrl:
          type: string
          description: 이전 pagination url
          example: http://localhost:3000/api/v2/eth/value-transfer-events?page=1
        totalCount:
          type: number
          description: 총 갯수
      required:
        - nextUrl
        - previousUrl
        - totalCount
    GetManyResponseForValueTransferEventDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ValueTransferEventDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    CallEventDTO:
      type: object
      properties:
        fromAddress:
          type: string
          description: 호출한 스마트 컨트랙트 주소
          example: '0x4c49f0ead605aca868364769c9a4ef24930810b5'
        toAddress:
          type: string
          description: 호출한 스마트 컨트랙트 주소
          example: '0xe3d9325576bf491c2f35e92b020b7b990557f545'
        data:
          type: string
          description: data
          example: '0x6eea436c'
        id:
          type: number
          description: 입출금/호출 내역의 ID
          example: 100393
        createdAt:
          type: string
          description: '트랜잭션 생성 시간 (형식: ms, UNIX time)'
          example: '1620056478365'
        updatedAt:
          type: string
          description: '트랜잭션 상태가 마지막으로 변경된 시간 (형식: ms, UNIX time)'
          example: '1620056481504'
        status:
          type: string
          description: 트랜잭션 상태
          example: CONFIRMED
        transactionHash:
          type: string
          description: 트랜잭션 해시
          example: '0xb53d099ca4ad755f3c66f0d64057eae26420d946241685a6745e2f09bc81cf7e'
        walletId:
          type: string
          description: 입출금 지갑 ID
          example: 98fa482e258bbd5cbac1393acef9e0e6
        transactionId:
          type: string
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          example: 2def027e99e906f8b912c691def10861
        orgId:
          type: string
          description: 지갑이 속한 팀(Org)의 ID
          example: 575a431dc73615a9e65648180bbd4fbb
        masterWalletId:
          type: string
          description: 입출금된 지갑이 속해있는 마스터 지갑 ID
          example: 98fa482e258bbd5cbac1393acef9e0e6
        confirmation:
          type: string
          description: 블록 컨펌 수 (16진법)
          example: '0x3ed'
      required:
        - fromAddress
        - toAddress
        - data
        - id
        - createdAt
        - updatedAt
        - status
        - walletId
        - confirmation
    GetManyResponseForCallEventDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/CallEventDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    BalanceDTO:
      type: object
      properties:
        coinId:
          type: string
          description: Henesis에서 부여한 Coin의 ID
          example: '11'
        amount:
          type: string
          description: '확정된 잔액 (단위: wei, peb)'
          example: '1000000000000'
        spendableAmount:
          type: string
          description: '출금 가능한 잔액 (= 총 잔액 - 확정되지 않은 출금 요청액)(단위: wei, peb)'
          example: '1000000000000'
        name:
          type: string
          description: 코인 이름
          example: ethereum
        ticker:
          type: string
          description: 코인의 기호
          example: ETH
        decimals:
          type: number
          description: 코인의 소수점 자릿수
          example: 18
      required:
        - coinId
        - amount
        - spendableAmount
        - name
        - ticker
        - decimals
    TransactionDTO:
      type: object
      properties:
        id:
          type: string
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다, 블록체인에서 부여하는 트랜잭션 해시와
            다른 개념입니다)
          example: b549bfaaa74d1c4244ecc655738b1984
        blockchain:
          description: 메인넷 종류
          enum:
            - ETHEREUM
            - KLAYTN
            - BITCOIN
          type: string
        hash:
          type: string
          description: 트랜잭션 해시 (트랜잭션 상태가 REQUESTED일 때는 존재하지 않습니다)
          example: '0x8a1ef722a2884d53a86874c8ba19bcf267bb0b8a81da00c14ddc6457cf1eaf96'
        error:
          type: string
          description: 트랜잭션 전송 시 발생한 에러
        status:
          description: 트랜잭션 상태
          enum:
            - PENDING_APPROVAL
            - REJECTED
            - REQUESTED
            - PENDING
            - FAILED
            - MINED
            - REVERTED
            - INTERNAL_REVERTED
            - CONFIRMED
            - REPLACED
          type: string
        fee:
          type: string
          description: 트랜잭션 수수료
          example: '10000000'
        createdAt:
          type: string
          description: '트랜잭션 생성 시간 (형식: ms, UNIX time)'
          example: '1614582928222'
        updatedAt:
          type: string
          description: '트랜잭션 상태가 변한 시간 (형식: ms, UNIX time)'
          example: '1612411724023'
      required:
        - id
        - blockchain
        - hash
        - error
        - status
        - fee
        - createdAt
        - updatedAt
    GetManyResponseForTransactionDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    KeyDTO:
      type: object
      properties:
        address:
          type: string
          description: Key의 주소
          example: ETH
        pub:
          type: string
          description: Key의 Pub Key 정보
          example: ETH
        keyFile:
          type: string
          description: Key의 Private Key를 암호화한 값
          example: ETH
      required:
        - pub
    MasterWalletDTO:
      type: object
      properties:
        accountKey:
          description: KEY
          example: KEY
          allOf:
            - $ref: '#/components/schemas/KeyDTO'
        encryptionKey:
          type: string
          description: 마스터 지갑 비밀번호를 복구하기 위해 암호화하는 데 쓰인 키
          example: f0880e48251dd2f8574a8c8a4d65311030185d5e451e8a474b89c2b473b5d953
        whitelistActivated:
          type: boolean
          description: 출금 주소 화이트리스팅의 활성화 유무
          example: false
        id:
          type: string
          description: 지갑 ID
          example: 407a31c97902faf2b5b2cd4b1fa1cfcd
        name:
          type: string
          description: 지갑 이름
          example: bit
        address:
          type: string
          description: 지갑 주소
          example: '0x2c27695429903b1e36299ce1eb89a3c1c34d115d'
        createdAt:
          type: string
          description: '지갑 생성 시간 (단위: ms, UNIX time)'
          example: '1615793637580'
        updatedAt:
          type: string
          description: '지갑 정보 수정 시간 (단위: ms, UNIX time)'
          example: '1615793656270'
        status:
          description: 지갑 상태
          example: ACTIVE
          enum:
            - ACTIVE
            - CREATING
            - FAILED
            - INACTIVE
          type: string
        blockchain:
          description: 블록체인 타입
          example: ETHEREUM
          enum:
            - ETHEREUM
            - KLAYTN
            - BITCOIN
          type: string
        version:
          type: string
          description: 컨트랙트 버전
          example: v3
        transactionId:
          type: string
          nullable: true
          description: 지갑 생성 트랜잭션의 ID
          example: 183365bc7837eceb5c9292e5be1655b7
        error:
          type: string
          nullable: true
          description: 지갑 생성 실패 시 발생한 에러
          example: 'null'
      required:
        - id
        - name
        - address
        - createdAt
        - updatedAt
        - status
        - blockchain
    SendMasterWalletContractCallRequestDTO:
      type: object
      properties:
        contractAddress:
          type: string
          description: 트랜잭션을 보낼 스마트 컨트랙트 주소
          example: '0x2c27695429903b1e36299ce1eb89a3c1c34d115d'
        value:
          type: string
          description: 트랜잭션에 담을 암호화폐의 양
          example: '0x1'
        data:
          type: string
          description: 트랜잭션에 담을 데이터
          example: data
        passphrase:
          type: string
          description: 마스터 지갑의 비밀번호
          example: passphrase
        gasPrice:
          type: string
          description: |-
            트랜잭션에 사용할 gas price (단위: wei)
               null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는 값으로 설정합니다.
          example: '0x1'
        gasLimit:
          type: string
          description: |-
            트랜잭션에 사용할 gas limit
               null일 경우, Henesis가 자동으로 설정합니다.
          example: '0x1'
      required:
        - contractAddress
        - value
        - data
        - passphrase
    ChangeMasterWalletNameRequestDTO:
      type: object
      properties:
        name:
          type: string
          description: 마스터 지갑의 새로운 이름
          example: bit
      required:
        - name
    SendMasterWalletCoinRequestDTO:
      type: object
      properties:
        ticker:
          type: string
          description: 암호화폐의 기호 (symbol)
          example: ETH
        to:
          type: string
          description: 암호화폐를 받을 지갑 주소
          example: '0x2c27695429903b1e36299ce1eb89a3c1c34d115d'
        amount:
          type: string
          description: |-
            암호화폐의 양 (단위: wei, peb)
               (16진법, 맨 앞에 반드시 '0x' 붙여야 함)
          example: '0xDBE16A831'
        passphrase:
          type: string
          description: 마스터 지갑의 비밀번호
          example: passphrase
        gasPrice:
          type: string
          description: |-
            트랜잭션에 사용할 gas price (단위: wei, peb)
               null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는 값으로 설정합니다.
          example: '0x1'
        gasLimit:
          type: string
          description: |-
            트랜잭션에 사용할 gas limit
               null일 경우, Henesis가 자동으로 설정합니다.
          example: '0x1'
      required:
        - ticker
        - to
        - amount
        - passphrase
    SendMasterWalletBatchTransactionsRequestDTO:
      type: object
      properties:
        passphrase:
          type: string
          description: 마스터 지갑의 비밀번호
          example: passphrase
        requests:
          type: object
          description: 전송할 트랜잭션 요청들
      required:
        - passphrase
        - requests
    FlushRequestDTO:
      type: object
      properties:
        ticker:
          type: string
          description: 옮기고자 하는 코인/토큰의 기호 (symbol)
          example: ETH
        userWalletIds:
          description: 옮기고자 하는 사용자 지갑 ID 목록 (최대 50개)
          example:
            - 70d1205b97eb651413d34d14ec5cb285
          type: array
          items:
            type: string
        passphrase:
          type: string
          description: 마스터 지갑의 비밀번호
          example: passphrase
        gasPrice:
          type: string
          description: |-
            트랜잭션에 사용할 gas price (단위: wei, peb)
               null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는 값으로 설정합니다.
          example: '0x1'
        gasLimit:
          type: string
          description: |-
            트랜잭션에 사용할 gas limit
               null일 경우, Henesis가 자동으로 설정합니다.
          example: '0x1'
      required:
        - ticker
        - userWalletIds
        - passphrase
    UserWalletDTO:
      type: object
      properties:
        id:
          type: string
          description: 지갑 ID
          example: 407a31c97902faf2b5b2cd4b1fa1cfcd
        name:
          type: string
          description: 지갑 이름
          example: bit
        address:
          type: string
          description: 지갑 주소
          example: '0x2c27695429903b1e36299ce1eb89a3c1c34d115d'
        createdAt:
          type: string
          description: '지갑 생성 시간 (단위: ms, UNIX time)'
          example: '1615793637580'
        updatedAt:
          type: string
          description: '지갑 정보 수정 시간 (단위: ms, UNIX time)'
          example: '1615793656270'
        status:
          description: 지갑 상태
          example: ACTIVE
          enum:
            - ACTIVE
            - CREATING
            - FAILED
            - INACTIVE
          type: string
        blockchain:
          description: 블록체인 타입
          example: ETHEREUM
          enum:
            - ETHEREUM
            - KLAYTN
            - BITCOIN
          type: string
        version:
          type: string
          description: 컨트랙트 버전
          example: v3
        transactionId:
          type: string
          nullable: true
          description: 지갑 생성 트랜잭션의 ID
          example: 183365bc7837eceb5c9292e5be1655b7
        error:
          type: string
          nullable: true
          description: 지갑 생성 실패 시 발생한 에러
          example: 'null'
      required:
        - id
        - name
        - address
        - createdAt
        - updatedAt
        - status
        - blockchain
    GetManyResponseForUserWalletDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserWalletDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    CreateUserWalletRequestDTO:
      type: object
      properties:
        name:
          type: string
          description: 지갑 이름
          example: bit
        passphrase:
          type: string
          description: 지갑 비밀번호
          example: passphrase
        gasPrice:
          type: string
          description: '트랜잭션에 사용할 gas price (단위: wei, peb)'
          example: '0x1'
        salt:
          type: string
          description: salt
          example: salt
      required:
        - name
        - passphrase
        - gasPrice
        - salt
    SendUserWalletContractCallRequestDTO:
      type: object
      properties:
        contractAddress:
          type: string
          description: 트랜잭션을 보낼 스마트 컨트랙트 주소
          example: '0x2c27695429903b1e36299ce1eb89a3c1c34d115d'
        value:
          type: string
          description: 트랜잭션에 담을 암호화폐의 양
          example: '0x1'
        data:
          type: string
          description: 트랜잭션에 담을 데이터
          example: data
        passphrase:
          type: string
          description: 지갑의 비밀번호
          example: passphrase
        gasPrice:
          type: string
          description: |-
            트랜잭션에 사용할 gas price (단위: wei, peb)
               null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는 값으로 설정합니다.
          example: '0x1'
        gasLimit:
          type: string
          description: |-
            트랜잭션에 사용할 gas limit
               null일 경우, Henesis가 자동으로 설정합니다.
          example: '0x1'
      required:
        - contractAddress
        - value
        - data
        - passphrase
    ChangeUserWalletNameRequestDTO:
      type: object
      properties:
        name:
          type: string
          description: 변경할 지갑 이름
          example: bit
      required:
        - name
    SendUserWalletCoinRequestDTO:
      type: object
      properties:
        ticker:
          type: string
          description: 암호화폐의 기호 (symbol)
          example: ETH
        to:
          type: string
          description: 암호화폐를 받을 지갑 주소
          example: '0x2c27695429903b1e36299ce1eb89a3c1c34d115d'
        amount:
          type: string
          description: |-
            암호화폐의 양 (단위: wei, peb)
               (16진법, 맨 앞에 반드시 '0x' 붙여야 함)
          example: '0xDBE16A831'
        passphrase:
          type: string
          description: 마스터 지갑의 비밀번호
          example: passphrase
        gasPrice:
          type: string
          description: |-
            트랜잭션에 사용할 gas price (단위: wei, peb)
               null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는 값으로 설정합니다.
          example: '0x1'
        gasLimit:
          type: string
          description: |-
            트랜잭션에 사용할 gas limit
               null일 경우, Henesis가 자동으로 설정합니다.
          example: '0x1'
      required:
        - ticker
        - to
        - amount
        - passphrase
    RetryCreateMasterWalletRequestDTO:
      type: object
      properties:
        gasPrice:
          type: string
          description: |-
            트랜잭션에 사용할 gas price (단위: wei, peb)
               null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는 값으로 설정합니다.
          example: '0x1'
    RetryCreateUserWalletRequestDTO:
      type: object
      properties:
        gasPrice:
          type: string
          description: |-
            트랜잭션에 사용할 gas price (단위: wei, peb)
               null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는 값으로 설정합니다.
          example: '0x1'
    InvalidAccessIpException:
      type: object
      properties:
        message:
          type: string
          example: ip '106.101.128.133' is not allowed
        code:
          type: number
          example: 4008
      required:
        - message
        - code
    InvalidAccessTokenException:
      type: object
      properties:
        message:
          type: string
          example: expired or invalid access token and signature
        code:
          type: number
          example: 4001
      required:
        - message
        - code
    AccessTokenNotProvidedException:
      type: object
      properties:
        message:
          type: string
          example: access token not provided
        code:
          type: number
          example: 4001
      required:
        - message
        - code
    BtcTransactionOutputDTO:
      type: object
      properties:
        address:
          type: string
          description: 해당 UTXO를 소유한 주소
        amount:
          type: string
          description: 'Output에 포함된 암호화폐의 양 (단위: satoshi) (형식: 16진법)'
        transactionId:
          type: string
          description: 트랜잭션 ID
        outputIndex:
          type: number
          description: 해당 Output이 같은 트랜잭션에 포함된 여러 UTXO 중에 몇 번째 Output인지 나타내는 값
        scriptPubKey:
          type: string
          description: scriptPubKey
        isChange:
          type: boolean
          description: 전송 후 잔액을 자신의 지갑으로 다시 보내는 Output인가?
      required:
        - address
        - amount
        - transactionId
        - outputIndex
        - scriptPubKey
        - isChange
    BtcTransactionDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            트랜잭션 ID
               (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인 트랜잭션 해시와 다른 개념입니다.)
        transactionHash:
          type: string
          description: 온체인 트랜잭션 해시
        blockNumber:
          type: string
          description: 블록
        amount:
          type: string
          description: '전송할 암호화폐의 양 (단위: satoshi) (형식: 16진법)'
        feeAmount:
          type: string
          description: 수수료 금액
        createdAt:
          type: string
          description: '트랜잭션이 생성된 시간 (형식: ms, UNIX time)'
        updatedAt:
          type: string
          description: '트랜잭션 상태가 마지막으로 변경된 시간 (형식: ms, UNIX time)'
        hex:
          type: string
          description: 블록체인에 전파된 트랜잭션 Body의 raw data
        outputs:
          description: 트랜잭션을 통해 생성된 UTXO의 Output
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionOutputDTO'
      required:
        - id
        - transactionHash
        - amount
        - createdAt
        - updatedAt
        - hex
        - outputs
    TransferDTO:
      type: object
      properties:
        id:
          type: number
          description: 코인/토큰 입출금 내역의 ID
          example: 375031
        from:
          type: string
          description: 출금 주소
          example: '0x1f10ecbd971eab345ea19e96dc237b1fbd63de96'
        to:
          type: string
          description: 입금 주소
          example: '0xdd00383e5a51166bba3e96d84c14a36d72e6c128'
        amount:
          type: string
          description: 암호화폐의 양
          example: '1000000000'
        status:
          type: string
          description: 트랜잭션 상태
          example: CONFIRMED
          enum:
            - PENDING_APPROVAL
            - REJECTED
            - REQUESTED
            - PENDING
            - FAILED
            - REVERTED
            - REPLACED
            - MINED
            - CONFIRMED
        orgId:
          type: string
          description: 지갑이 속한 팀(Organization)의 ID
          example: 31cafc79bd437e1b8e7b8209e399d3f3
        decimals:
          type: number
          description: 암호화폐의 소수점 자릿수
          example: 18
        walletId:
          type: string
          description: 입출금 지갑 ID
          example: ae40b1b3dd953e5592c21e58be30d807
        depositAddressId:
          type: string
          description: 입금 주소 ID
          example: ae40b1b3dd953e5592c21e58be30d807
        ticker:
          type: string
          description: 암호화폐의 기호
          example: USDT
        transferType:
          type: string
          description: 입출금 타입
          example: WITHDRAWAL
          enum:
            - WITHDRAWAL
            - DEPOSIT
        transactionId:
          type: string
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          example: 8c87c578d7568edc156f831cf03c3ff0
        transactionHash:
          type: string
          description: 트랜잭션 해시
          example: '0xef76a243fa224f723922a1b067dd916fb1b2568aff292d2d1d183a807804922f'
        createdAt:
          type: string
          description: '트랜잭션 생성 시간 (형식: ms, UNIX time)'
          example: '1612411568760'
        updatedAt:
          type: string
          description: '트랜잭션 상태가 마지막으로 변경된 시간 (형식: ms, UNIX time)'
          example: '1612411724023'
        name:
          type: string
          description: 해당 내역의 지갑 또는 입금 주소의 이름
      required:
        - id
        - from
        - to
        - amount
        - status
        - orgId
        - decimals
        - walletId
        - depositAddressId
        - ticker
        - transferType
        - transactionId
        - transactionHash
        - createdAt
        - updatedAt
        - name
    GetManyResponseForTransferDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/TransferDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    WalletDTO:
      type: object
      properties:
        id:
          type: string
          description: 지갑 ID
          example: a75611f2e624c08ecfb7df4218b318bc
        name:
          type: string
          description: 지갑 이름
          example: test-wallet
        address:
          type: string
          description: 지갑 주소
          example: '0xdde12e85d7f5d0003eff13f7a3cf6068b5a41454'
        blockchain:
          description: 메인넷 종류
          example: ethereum
          enum:
            - ETHEREUM
            - KLAYTN
            - BITCOIN
          type: string
        createdAt:
          type: string
          description: '지갑 생성 시간 (형식: ms, UNIX time)'
          example: '1612411568760'
        updatedAt:
          type: string
          description: '지갑 정보 수정 시간 (단위: ms, UNIX time)'
          example: '1612411724023'
        status:
          description: 지갑 상태
          example: ACTIVE
          enum:
            - ACTIVE
            - CREATING
            - FAILED
            - INACTIVE
          type: string
        whitelistActivated:
          type: boolean
          description: 출금 주소 화이트리스팅의 활성화 유무
          example: false
        version:
          type: string
          description: 컨트랙트 버전
          example: v4
      required:
        - id
        - name
        - address
        - blockchain
        - createdAt
        - updatedAt
        - status
        - whitelistActivated
        - version
    CreateDepositAddressRequestDTO:
      type: object
      properties:
        name:
          type: string
          description: 입금 주소 이름
          example: test-deposit-address
      required:
        - name
    DepositAddressDTO:
      type: object
      properties:
        id:
          type: string
          description: 입금 주소 ID
          example: a1f9e4c33ea9f51974490fd1c30efb3e
        address:
          type: string
          description: 입금 주소
          example: '0x70d4e4abbe12c9c5098df3b31d9ad89c99a01967'
        name:
          type: string
          description: 입금 주소 이름
          example: deposit-address-1
        blockchain:
          description: 메인넷 종류
          example: ETHEREUM
          enum:
            - ETHEREUM
            - KLAYTN
            - BITCOIN
          type: string
        createdAt:
          type: string
          description: '지갑 생성 시간 (단위: ms, UNIX time)'
          example: '1614582860091'
        updatedAt:
          type: string
          description: '지갑 정보 수정 시간 (단위: ms, UNIX time)'
          example: '1614582928222'
        version:
          type: string
          description: 입금 주소 버전
          example: v4
      required:
        - id
        - address
        - name
        - blockchain
        - createdAt
        - updatedAt
        - version
    GetManyResponseForDepositAddressDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/DepositAddressDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    TransferRequestDTO:
      type: object
      properties:
        to:
          type: string
          description: 받을 주소
        amount:
          type: string
          description: 보낼 금액
        passphrase:
          type: string
          description: 비밀번호
        feeRate:
          type: string
          description: |-
            트랜잭션 vbyte당 지불할 fee 가격 (단위: satoshi)
               (16진법, 맨 앞에 반드시 '0x' 붙여야 함) (v2.10.9 이상 지원)
      required:
        - to
        - amount
        - passphrase
        - feeRate
    NoCoinException:
      type: object
      properties:
        message:
          type: string
          example: there is no '2' coin at 'ETHEREUM'
        code:
          type: number
          example: 4000
      required:
        - message
        - code
    ContractCallsDTO:
      type: object
      properties:
        id:
          type: string
          description: 스마트 컨트랙트 호출 내역의 ID
          example: '375031'
        data:
          type: string
          description: 컨트랙트 호출시 사용된 data
          example: >-
            0xa9059cbb0000000000000000000000001f10ecbd971eab345ea19e96dc237b1fbd63de9600000000000000000000000000000000000000000000000000000000000f4240
        status:
          type: string
          description: 트랜잭션 상태
          example: CONFIRMED
          enum:
            - PENDING_APPROVAL
            - REJECTED
            - REQUESTED
            - PENDING
            - FAILED
            - REVERTED
            - REPLACED
            - MINED
            - CONFIRMED
        walletId:
          type: string
          description: 지갑 ID
          example: ae40b1b3dd953e5592c21e58be30d807
        orgId:
          type: string
          description: 지갑이 속한 팀(Organization)의 ID
          example: 31cafc79bd437e1b8e7b8209e399d3f3
        transactionId:
          type: string
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          example: 8c87c578d7568edc156f831cf03c3ff0
        toAddress:
          type: string
          description: 호출한 스마트 컨트랙트 주소
          example: '0xdd00383e5a51166bba3e96d84c14a36d72e6c128'
        fromAddress:
          type: string
          description: 호출한 지갑의 주소
          example: '0x1f10ecbd971eab345ea19e96dc237b1fbd63de96'
        transactionHash:
          type: string
          description: 트랜잭션 해시
          example: '0xef76a243fa224f723922a1b067dd916fb1b2568aff292d2d1d183a807804922f'
        createdAt:
          type: string
          description: '트랜잭션 생성 시간 (형식: ms, UNIX time)'
          example: '1612411568760'
        updatedAt:
          type: string
          description: '트랜잭션 상태가 마지막으로 변경된 시간 (형식: ms, UNIX time)'
          example: '1612411724023'
        blockchain:
          type: string
          description: 메인넷 종류
          example: ethereum
          enum:
            - ETHEREUM
            - KLAYTN
            - BITCOIN
      required:
        - id
        - data
        - status
        - walletId
        - orgId
        - transactionId
        - toAddress
        - fromAddress
        - transactionHash
        - createdAt
        - updatedAt
        - blockchain
    GetManyResponseForContractCallsDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ContractCallsDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    InvalidStatusException:
      type: object
      properties:
        message:
          type: string
          example: '''status'' is invalid: not supported event status'
        code:
          type: number
          example: 4001
      required:
        - message
        - code
    TransactionIdNotFoundException:
      type: object
      properties:
        message:
          type: string
          example: transaction id '1' does not exists
        code:
          type: number
          example: 4000
      required:
        - message
        - code
    WalletNotFoundException:
      type: object
      properties:
        message:
          type: string
          example: wallet 'c27732256a1f8d45df5aec31ba7ef85cd' does not exist
        code:
          type: number
          example: 4000
      required:
        - message
        - code
    NoWalletNameException:
      type: object
      properties:
        message:
          type: string
          example: wallet name should not be empty
        code:
          type: number
          example: 4000
      required:
        - message
        - code
    DepositAddressNotFoundException:
      type: object
      properties:
        message:
          type: string
          example: deposit address 'c27732256a1f8d45df5aec31ba7ef85cd' does not exist
        code:
          type: number
          example: 4000
      required:
        - message
        - code
    ChangeWalletNameRequestDTO:
      type: object
      properties:
        name:
          type: string
          description: 지갑의 새로운 이름
      required:
        - name
    SendCoinRequestDTO:
      type: object
      properties:
        gasPrice:
          type: number
          description: >-
            트랜잭션에 사용할 gas price (단위: wei) null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는
            값으로 설정합니다.
        ticker:
          type: string
          description: 암호화폐의 기호 (ticker)
          example: ETH
        to:
          type: string
          description: 암호화폐의 받을 지갑 주소
          example: '0xab28d146e860e0b132695c941f706d783a158345'
        amount:
          type: string
          description: '암호화폐의 양 (단위: wei, peb)'
          example: '100000000'
        passphrase:
          type: string
          description: 지갑의 비밀번호
          example: passphrase
      required:
        - ticker
        - to
        - amount
        - passphrase
    CreateTransactionRequestDTO:
      type: object
      properties:
        value:
          type: number
          description: 트랜잭션에 담을 암호화폐의 양
          example: 0
        gasPrice:
          type: number
          description: >-
            트랜잭션에 사용할 gas price (단위: wei) null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는
            값으로 설정합니다.
        to:
          type: string
          description: 트랜잭션을 보낼 스마트 컨트랙트 주소
          example: '0xc10f954e2be747e1d9d47948b2c15e5b71c5d9c8'
        data:
          type: string
          description: 트랜잭션에 담을 데이터
          example: '0x0'
        passphrase:
          type: string
          description: 지갑의 비밀번호
          example: passphrase
      required:
        - to
        - data
        - passphrase
    ReplaceTransactionRequestDTO:
      type: object
      properties:
        gasPrice:
          type: number
          description: >-
            트랜잭션에 사용할 gas price (단위: wei) null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는
            값으로 설정합니다.
    Target:
      type: object
      properties:
        coinId:
          type: string
          description: Henesis에서 부여한 Coin의 ID
          example: '11'
        depositAddressId:
          type: string
          description: 입금 주소 ID
          example: c2bd6506cb56a6baaff32653ac77ef49
      required:
        - coinId
        - depositAddressId
    CreateFlushRequestDTO:
      type: object
      properties:
        gasPrice:
          type: number
          description: >-
            트랜잭션에 사용할 gas price (단위: wei) null일 경우, Henesis가 자동으로 5분 안에 채굴될 수 있는
            값으로 설정합니다.
        gasLimit:
          type: number
          description: '트랜잭션에 사용할 gas limit (단위: wei) null일 경우, Henesis가 자동으로 설정합니다.'
        targets:
          type: array
          items:
            $ref: '#/components/schemas/Target'
      required:
        - targets
paths:
  /api/version:
    get:
      operationId: VersionController_getVersion
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
  /api/v2/klay/coins:
    get:
      operationId: CoinsController_getCoins
      summary: 전체 코인/토큰 목록 조회하기
      description: Henesis Wallet에서 지원하는 모든 가상자산(토큰, 코인)을 조회합니다.
      parameters:
        - &ref_0
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_1
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: flag
          required: false
          in: query
          description: COIN FLAG
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoinDTO'
        '401': &ref_2
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_3
        - coins
  /api/v2/klay/coins/{ticker}:
    get:
      operationId: CoinsController_getCoin
      summary: 코인/토큰 정보 조회하기
      description: Henesis Wallet에서 지원하는 특정 가상자산(토큰, 코인)을 조회합니다.
      parameters:
        - *ref_0
        - *ref_1
        - name: ticker
          required: true
          in: path
          description: COIN TICKER
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoinDTO'
        '401': *ref_2
      tags: *ref_3
  /api/v2/klay/events/value-transfer-events:
    get:
      operationId: EventsController_getValueTransferEvents
      summary: 코인/토큰 입출금 내역 조회하기
      description: 모든 지갑의 가상자산 입출금 내역을 조회합니다.
      parameters:
        - &ref_4
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_5
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: symbol
          required: false
          in: query
          description: 토큰별로 필터링하여 조회하고 싶은 경우, 토큰의 symbol을 입력합니다.
          schema:
            type: string
        - name: walletId
          required: false
          in: query
          description: 단일 지갑을 조회하고 싶은 경우, 해당 지갑 ID를 입력합니다.
          schema:
            type: string
        - name: masterWalletId
          required: false
          in: query
          description: 마스터 지갑 ID (해당 마스터 지갑을 포함하여 하위의 사용자 지갑 입출금 내역도 함께 조회합니다.)
          schema:
            type: string
        - name: transactionId
          required: false
          in: query
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.) 
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 트랜잭션 해시
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: >-
            트랜잭션 상태

            ex. PENDING_APPROVAL, REJECTED, REQUESTED, PENDING, MINED,
            CONFIRMED, FAILED 
          schema:
            type: string
        - name: updatedAtGte
          required: false
          in: query
          description: |-
            updatedAt이 해당 시점과 같거나 그보다 이후인 트랜잭션 조회 
            (형식: ms, UNIX time) 
            ex. 1593669619000
          schema:
            type: string
        - name: updatedAtLt
          required: false
          in: query
          description: |-
            updatedAt이 해당 시점보다 이전인 트랜잭션 조회 
            (형식: ms, UNIX time) 
            ex. 1593670000000 
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15) '
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForValueTransferEventDTO'
        '401': &ref_6
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_7
        - events
  /api/v2/klay/events/call-events:
    get:
      operationId: EventsController_getCallEvents
      summary: 스마트 컨트랙트 호출 내역 조회하기
      description: 내가 발생시킨 스마트 컨트랙트 호출 내역을 조회합니다.
      parameters:
        - *ref_4
        - *ref_5
        - name: walletId
          required: false
          in: query
          description: 단일 지갑을 조회하고 싶은 경우, 해당 지갑 ID를 입력합니다.
          schema:
            type: string
        - name: masterWalletId
          required: false
          in: query
          description: 마스터 지갑 ID (해당 마스터 지갑을 포함하여 하위의 사용자 지갑 입출금 내역도 함께 조회합니다.)
          schema:
            type: string
        - name: transactionId
          required: false
          in: query
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.) 
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 트랜잭션 해시
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: >-
            트랜잭션 상태

            ex. PENDING_APPROVAL, REJECTED, REQUESTED, PENDING, MINED,
            CONFIRMED, FAILED 
          schema:
            type: string
        - name: updatedAtGte
          required: false
          in: query
          description: |-
            updatedAt이 해당 시점과 같거나 그보다 이후인 트랜잭션 조회 
            (형식: ms, UNIX time) 
            ex. 1593669619000
          schema:
            type: string
        - name: updatedAtLt
          required: false
          in: query
          description: |-
            updatedAt이 해당 시점보다 이전인 트랜잭션 조회 
            (형식: ms, UNIX time) 
            ex. 1593670000000 
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15) '
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForCallEventDTO'
        '401': *ref_6
      tags: *ref_7
  /api/v2/klay/henesis-keys/balance:
    get:
      operationId: HenesisKeysController_getHenesisKeyBalance
      summary: 수수료 지갑 잔액 조회하기
      description: 수수료 지갑의 잔액을 조회합니다.
      parameters:
        - name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceDTO'
        '401':
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags:
        - henesis-keys
  /api/v2/klay/transactions:
    get:
      operationId: TransactionsController_getTransactions
      summary: 모든 트랜잭션 정보 조회하기
      description: 내가 발생시킨 모든 트랜잭션의 정보를 조회합니다.
      parameters:
        - &ref_8
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_9
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: address
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: toAddress
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: fromAddress
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: start
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: end
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: statuses
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: array
            items:
              type: string
        - name: types
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
        - name: keyId
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15)'
          schema:
            type: number
        - name: sort
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForTransactionDTO'
        '401': &ref_10
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_11
        - transactions
  /api/v2/klay/transactions/{transactionId}:
    get:
      operationId: TransactionsController_getTransaction
      summary: 특정 트랜잭션 정보 조회하기
      description: 내가 발생시킨 특정 트랜잭션의 정보를 조회합니다.
      parameters:
        - *ref_8
        - *ref_9
        - name: transactionId
          required: true
          in: path
          description: 트랜잭션 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_10
      tags: *ref_11
  /api/v2/klay/wallets:
    get:
      operationId: WalletsController_getMasterWallets
      summary: 전체 마스터 지갑 목록 조회하기
      description: 모든 마스터 지갑 목록을 조회합니다.
      parameters:
        - &ref_12
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_13
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: 지갑 이름
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterWalletDTO'
        '401': &ref_14
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_15
        - wallets
  /api/v2/klay/wallets/{masterWalletId}:
    get:
      operationId: WalletsController_getMasterWallet
      summary: 마스터 지갑 조회하기
      description: 마스터 지갑 목록을 조회합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterWalletDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/contract-call:
    post:
      operationId: WalletsController_sendMasterWalletContractCall
      summary: 마스터 지갑에서 스마트 컨트랙트 호출하기
      description: 특정 마스터 지갑에서 일반적인 스마트 컨트랙트 함수를 호출하는 트랜잭션을 발생시킵니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMasterWalletContractCallRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/name:
    patch:
      operationId: WalletsController_changeMasterWalletName
      summary: 마스터 지갑 이름 변경하기
      description: 특정 마스터 지갑의 이름을 변경합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeMasterWalletNameRequestDTO'
      responses:
        '200':
          description: ''
        '204':
          description: ''
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/balance:
    get:
      operationId: WalletsController_getMasterWalletBalance
      summary: 마스터 지갑 잔고 조회하기
      description: 특정 마스터 지갑의 잔액을 조회합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: flag
          required: false
          in: query
          description: FLAG
          schema:
            type: string
        - name: symbol
          required: false
          in: query
          description: SYMBOL
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/transfer:
    post:
      operationId: WalletsController_sendMasterWalletCoin
      summary: 마스터 지갑에서 코인/토큰 전송하기
      description: 특정 마스터 지갑에서 가상자산을 송금합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMasterWalletCoinRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/batch-transactions:
    post:
      operationId: WalletsController_sendMasterWalletBatchTransactions
      summary: 마스터 지갑에서 여러 트랜잭션들을 모아서 호출하기
      description: |-
        특정 마스터 지갑에서 여러 트랜잭션을 모아 한꺼번에 발생니다.
        최대 10개까지 보낼 수 있습니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMasterWalletBatchTransactionsRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/flush:
    post:
      operationId: WalletsController_flush
      summary: 사용자 지갑 잔액을 모두 끌어오기
      description: 여러 사용자 지갑의 특정 코인/토큰 잔액을 모두 상위의 마스터 지갑으로 끌어옵니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlushRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/user-wallets/{userWalletId}:
    get:
      operationId: WalletsController_getUserWallet
      summary: 사용자 지갑 정보 조회하기
      description: 특정 사용자 지갑을 조회합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWalletDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/user-wallets:
    get:
      operationId: WalletsController_getUserWallets
      summary: 전체 사용자 지갑 목록 조회하기
      description: 특정 마스터 지갑에 속한 모든 사용자 지갑 목록을 조회합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: PAGE
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: SIZE
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: SORT
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: NAME
          schema:
            type: string
        - name: address
          required: false
          in: query
          description: ADDRESS
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema: {}
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForUserWalletDTO'
        '401': *ref_14
      tags: *ref_15
    post:
      operationId: WalletsController_createUserWallet
      summary: 사용자 지갑 생성하기
      description: 특정 마스터 지갑 하위에 새로운 사용자 지갑을 생성합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserWalletRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWalletDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/user-wallets/{userWalletId}/contract-call:
    post:
      operationId: WalletsController_sendUserWalletContractCall
      summary: 사용자 지갑에서 스마트 컨트랙트 호출하기
      description: 사용자 지갑에서 일반적인 스마트 컨트랙트 함수를 호출하는 트랜잭션을 발생시킵니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendUserWalletContractCallRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/user-wallets/{userWalletId}/name:
    patch:
      operationId: WalletsController_changeUserWalletName
      summary: 사용자 지갑 이름 변경하기
      description: 특정 사용자 지갑의 이름을 변경합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserWalletNameRequestDTO'
      responses:
        '200':
          description: ''
        '204':
          description: ''
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/user-wallets/{userWalletId}/balance:
    get:
      operationId: WalletsController_getUserWalletBalance
      summary: 사용자 지갑 잔고 조회하기
      description: 특정 사용자 지갑의 잔액을 조회합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
        - name: flag
          required: false
          in: query
          description: FLAG
          schema:
            type: string
        - name: symbol
          required: false
          in: query
          description: SYMBOL
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/user-wallets/{userWalletId}/transfer:
    post:
      operationId: WalletsController_sendUserWalletCoin
      summary: 사용자 지갑에서 코인/토큰 전송하기
      description: 특정 사용자 지갑에서 가상자산을 전송합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendUserWalletCoinRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/recreate:
    post:
      operationId: WalletsController_retryCreateMasterWallet
      summary: 마스터 지갑 재생성하기
      description: 마스터 지갑을 재생성합니다.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryCreateMasterWalletRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterWalletDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/klay/wallets/{masterWalletId}/user-wallets/{userWalletId}/recreate:
    post:
      operationId: WalletsController_retryCreateUserWallet
      summary: 사용자 지갑 생성 실패시 재시도하기
      description: >-
        특정 마스터 지갑 하위에 특정 사용자 지갑 생성 트랜잭션이 실패했을 때 재시도합니다.


        만약 사용자 지갑 생성 트랜잭션이 장시간 채굴 대기중(Pending)이어서 gasPrice를 높여 재시도하고 싶다면, '마스터
        지갑에서 발생한 트랜잭션 교체하기' API를 사용하세요.
      parameters:
        - *ref_12
        - *ref_13
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryCreateUserWalletRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterWalletDTO'
        '401': *ref_14
      tags: *ref_15
  /api/v2/eth/coins:
    get:
      operationId: CoinsController_getCoins
      summary: 전체 코인/토큰 목록 조회하기
      description: Henesis Wallet에서 지원하는 모든 가상자산(토큰, 코인)을 조회합니다.
      parameters:
        - &ref_16
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_17
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: flag
          required: false
          in: query
          description: COIN FLAG
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoinDTO'
        '401': &ref_18
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_19
        - coins
  /api/v2/eth/coins/{ticker}:
    get:
      operationId: CoinsController_getCoin
      summary: 코인/토큰 정보 조회하기
      description: Henesis Wallet에서 지원하는 특정 가상자산(토큰, 코인)을 조회합니다.
      parameters:
        - *ref_16
        - *ref_17
        - name: ticker
          required: true
          in: path
          description: COIN TICKER
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoinDTO'
        '401': *ref_18
      tags: *ref_19
  /api/v2/eth/events/value-transfer-events:
    get:
      operationId: EventsController_getValueTransferEvents
      summary: 코인/토큰 입출금 내역 조회하기
      description: 모든 지갑의 가상자산 입출금 내역을 조회합니다.
      parameters:
        - &ref_20
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_21
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: symbol
          required: false
          in: query
          description: 토큰별로 필터링하여 조회하고 싶은 경우, 토큰의 symbol을 입력합니다.
          schema:
            type: string
        - name: walletId
          required: false
          in: query
          description: 단일 지갑을 조회하고 싶은 경우, 해당 지갑 ID를 입력합니다.
          schema:
            type: string
        - name: masterWalletId
          required: false
          in: query
          description: 마스터 지갑 ID (해당 마스터 지갑을 포함하여 하위의 사용자 지갑 입출금 내역도 함께 조회합니다.)
          schema:
            type: string
        - name: transactionId
          required: false
          in: query
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.) 
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 트랜잭션 해시
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: >-
            트랜잭션 상태

            ex. PENDING_APPROVAL, REJECTED, REQUESTED, PENDING, MINED,
            CONFIRMED, FAILED 
          schema:
            type: string
        - name: updatedAtGte
          required: false
          in: query
          description: |-
            updatedAt이 해당 시점과 같거나 그보다 이후인 트랜잭션 조회 
            (형식: ms, UNIX time) 
            ex. 1593669619000
          schema:
            type: string
        - name: updatedAtLt
          required: false
          in: query
          description: |-
            updatedAt이 해당 시점보다 이전인 트랜잭션 조회 
            (형식: ms, UNIX time) 
            ex. 1593670000000 
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15) '
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForValueTransferEventDTO'
        '401': &ref_22
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_23
        - events
  /api/v2/eth/events/call-events:
    get:
      operationId: EventsController_getCallEvents
      summary: 스마트 컨트랙트 호출 내역 조회하기
      description: 내가 발생시킨 스마트 컨트랙트 호출 내역을 조회합니다.
      parameters:
        - *ref_20
        - *ref_21
        - name: walletId
          required: false
          in: query
          description: 단일 지갑을 조회하고 싶은 경우, 해당 지갑 ID를 입력합니다.
          schema:
            type: string
        - name: masterWalletId
          required: false
          in: query
          description: 마스터 지갑 ID (해당 마스터 지갑을 포함하여 하위의 사용자 지갑 입출금 내역도 함께 조회합니다.)
          schema:
            type: string
        - name: transactionId
          required: false
          in: query
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.) 
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 트랜잭션 해시
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: >-
            트랜잭션 상태

            ex. PENDING_APPROVAL, REJECTED, REQUESTED, PENDING, MINED,
            CONFIRMED, FAILED 
          schema:
            type: string
        - name: updatedAtGte
          required: false
          in: query
          description: |-
            updatedAt이 해당 시점과 같거나 그보다 이후인 트랜잭션 조회 
            (형식: ms, UNIX time) 
            ex. 1593669619000
          schema:
            type: string
        - name: updatedAtLt
          required: false
          in: query
          description: |-
            updatedAt이 해당 시점보다 이전인 트랜잭션 조회 
            (형식: ms, UNIX time) 
            ex. 1593670000000 
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15) '
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForCallEventDTO'
        '401': *ref_22
      tags: *ref_23
  /api/v2/eth/henesis-keys/balance:
    get:
      operationId: HenesisKeysController_getHenesisKeyBalance
      summary: 수수료 지갑 잔액 조회하기
      description: 수수료 지갑의 잔액을 조회합니다.
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceDTO'
      tags:
        - henesis-keys
  /api/v2/eth/transactions:
    get:
      operationId: TransactionsController_getTransactions
      summary: 모든 트랜잭션 정보 조회하기
      description: 내가 발생시킨 모든 트랜잭션의 정보를 조회합니다.
      parameters:
        - &ref_24
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_25
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: address
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: toAddress
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: fromAddress
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: start
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: end
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: statuses
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: array
            items:
              type: string
        - name: types
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
        - name: keyId
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15)'
          schema:
            type: number
        - name: sort
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForTransactionDTO'
        '401': &ref_26
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_27
        - transactions
  /api/v2/eth/transactions/{transactionId}:
    get:
      operationId: TransactionsController_getTransaction
      summary: 특정 트랜잭션 정보 조회하기
      description: 내가 발생시킨 특정 트랜잭션의 정보를 조회합니다.
      parameters:
        - *ref_24
        - *ref_25
        - name: transactionId
          required: true
          in: path
          description: 트랜잭션 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_26
      tags: *ref_27
  /api/v2/eth/wallets:
    get:
      operationId: WalletsController_getMasterWallets
      summary: 전체 마스터 지갑 목록 조회하기
      description: 모든 마스터 지갑 목록을 조회합니다.
      parameters:
        - &ref_28
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_29
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: 지갑 이름
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterWalletDTO'
        '401': &ref_30
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_31
        - wallets
  /api/v2/eth/wallets/{masterWalletId}:
    get:
      operationId: WalletsController_getMasterWallet
      summary: 마스터 지갑 조회하기
      description: 마스터 지갑 목록을 조회합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterWalletDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/contract-call:
    post:
      operationId: WalletsController_sendMasterWalletContractCall
      summary: 마스터 지갑에서 스마트 컨트랙트 호출하기
      description: 특정 마스터 지갑에서 일반적인 스마트 컨트랙트 함수를 호출하는 트랜잭션을 발생시킵니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMasterWalletContractCallRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/name:
    patch:
      operationId: WalletsController_changeMasterWalletName
      summary: 마스터 지갑 이름 변경하기
      description: 특정 마스터 지갑의 이름을 변경합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeMasterWalletNameRequestDTO'
      responses:
        '200':
          description: ''
        '204':
          description: ''
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/balance:
    get:
      operationId: WalletsController_getMasterWalletBalance
      summary: 마스터 지갑 잔고 조회하기
      description: 특정 마스터 지갑의 잔액을 조회합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: flag
          required: false
          in: query
          description: FLAG
          schema:
            type: string
        - name: symbol
          required: false
          in: query
          description: SYMBOL
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/transfer:
    post:
      operationId: WalletsController_sendMasterWalletCoin
      summary: 마스터 지갑에서 코인/토큰 전송하기
      description: 특정 마스터 지갑에서 가상자산을 송금합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMasterWalletCoinRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/batch-transactions:
    post:
      operationId: WalletsController_sendMasterWalletBatchTransactions
      summary: 마스터 지갑에서 여러 트랜잭션들을 모아서 호출하기
      description: |-
        특정 마스터 지갑에서 여러 트랜잭션을 모아 한꺼번에 발생니다.
        최대 10개까지 보낼 수 있습니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMasterWalletBatchTransactionsRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/flush:
    post:
      operationId: WalletsController_flush
      summary: 사용자 지갑 잔액을 모두 끌어오기
      description: 여러 사용자 지갑의 특정 코인/토큰 잔액을 모두 상위의 마스터 지갑으로 끌어옵니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlushRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/user-wallets/{userWalletId}:
    get:
      operationId: WalletsController_getUserWallet
      summary: 사용자 지갑 정보 조회하기
      description: 특정 사용자 지갑을 조회합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWalletDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/user-wallets:
    get:
      operationId: WalletsController_getUserWallets
      summary: 전체 사용자 지갑 목록 조회하기
      description: 특정 마스터 지갑에 속한 모든 사용자 지갑 목록을 조회합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: PAGE
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: SIZE
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: SORT
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: NAME
          schema:
            type: string
        - name: address
          required: false
          in: query
          description: ADDRESS
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema: {}
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForUserWalletDTO'
        '401': *ref_30
      tags: *ref_31
    post:
      operationId: WalletsController_createUserWallet
      summary: 사용자 지갑 생성하기
      description: 특정 마스터 지갑 하위에 새로운 사용자 지갑을 생성합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserWalletRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWalletDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/user-wallets/{userWalletId}/contract-call:
    post:
      operationId: WalletsController_sendUserWalletContractCall
      summary: 사용자 지갑에서 스마트 컨트랙트 호출하기
      description: 사용자 지갑에서 일반적인 스마트 컨트랙트 함수를 호출하는 트랜잭션을 발생시킵니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendUserWalletContractCallRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/user-wallets/{userWalletId}/name:
    patch:
      operationId: WalletsController_changeUserWalletName
      summary: 사용자 지갑 이름 변경하기
      description: 특정 사용자 지갑의 이름을 변경합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserWalletNameRequestDTO'
      responses:
        '200':
          description: ''
        '204':
          description: ''
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/user-wallets/{userWalletId}/balance:
    get:
      operationId: WalletsController_getUserWalletBalance
      summary: 사용자 지갑 잔고 조회하기
      description: 특정 사용자 지갑의 잔액을 조회합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
        - name: flag
          required: false
          in: query
          description: FLAG
          schema:
            type: string
        - name: symbol
          required: false
          in: query
          description: SYMBOL
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/user-wallets/{userWalletId}/transfer:
    post:
      operationId: WalletsController_sendUserWalletCoin
      summary: 사용자 지갑에서 코인/토큰 전송하기
      description: 특정 사용자 지갑에서 가상자산을 전송합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendUserWalletCoinRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/recreate:
    post:
      operationId: WalletsController_retryCreateMasterWallet
      summary: 마스터 지갑 재생성하기
      description: 마스터 지갑을 재생성합니다.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryCreateMasterWalletRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterWalletDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/eth/wallets/{masterWalletId}/user-wallets/{userWalletId}/recreate:
    post:
      operationId: WalletsController_retryCreateUserWallet
      summary: 사용자 지갑 생성 실패시 재시도하기
      description: >-
        특정 마스터 지갑 하위에 특정 사용자 지갑 생성 트랜잭션이 실패했을 때 재시도합니다.


        만약 사용자 지갑 생성 트랜잭션이 장시간 채굴 대기중(Pending)이어서 gasPrice를 높여 재시도하고 싶다면, '마스터
        지갑에서 발생한 트랜잭션 교체하기' API를 사용하세요.
      parameters:
        - *ref_28
        - *ref_29
        - name: masterWalletId
          required: true
          in: path
          description: 마스터 지갑 ID
          schema:
            type: string
        - name: userWalletId
          required: true
          in: path
          description: 유저 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryCreateUserWalletRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWalletDTO'
        '401': *ref_30
      tags: *ref_31
  /api/v2/btc/transfers:
    get:
      operationId: TransfersController_getTransfers
      summary: 입출금 내역 조회하기
      description: 입출금 내역을 조회합니다.
      parameters:
        - &ref_32
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_33
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: type
          required: false
          in: query
          description: '거래 타입 '
          schema:
            type: string
        - name: walletId
          required: false
          in: query
          description: 지갑 ID
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: 거래 상태
          schema:
            type: string
        - name: address
          required: false
          in: query
          description: 입금 주소 또는 출금 주소
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 온체인 트랜잭션 해시
          schema:
            type: string
        - name: updatedAtGte
          required: false
          in: query
          description: 전송 상태가 마지막으로 변경된 시점(updatedAt)이 특정 시점과 같거나 그보다 이후인 전송 내역 조회
          schema:
            type: string
        - name: updatedAtLt
          required: false
          in: query
          description: 전송 상태가 마지막으로 변경된 시점(updatedAt)이 특정 시점보다 이전인 전송 내역 조회
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15)'
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForTransferDTO'
        '401': &ref_34
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_35
        - transfers
  /api/v2/btc/transfers/{transferId}:
    get:
      operationId: TransfersController_getTransfer
      summary: 특정 입출금 내역 조회하기
      description: 특정 입출금 내역을 조회합니다.
      parameters:
        - *ref_32
        - *ref_33
        - name: transferId
          required: true
          in: path
          description: TRANSFER ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDTO'
        '401': *ref_34
      tags: *ref_35
  /api/v2/btc/wallets:
    get:
      operationId: WalletsController_getWallets
      summary: 전체 지갑 목록 조회하기
      description: 전체 지갑 목록을 조회합니다.
      parameters:
        - &ref_36
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_37
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: 지갑 이름
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletDTO'
        '401': &ref_38
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_39
        - wallets
  /api/v2/btc/wallets/{walletId}:
    get:
      operationId: WalletsController_getWallet
      summary: 지갑 정보 조회하기
      description: 특정 지갑의 상세 정보를 조회합니다.
      parameters:
        - *ref_36
        - *ref_37
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDTO'
        '401': *ref_38
      tags: *ref_39
  /api/v2/btc/wallets/{walletId}/balance:
    get:
      operationId: WalletsController_getWalletBalance
      summary: 지갑 잔고 조회하기
      description: 특정 지갑의 잔고를 변경합니다.
      parameters:
        - *ref_36
        - *ref_37
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceDTO'
        '401': *ref_38
      tags: *ref_39
  /api/v2/btc/wallets/{walletId}/deposit-addresses:
    post:
      operationId: WalletsController_createDepositAddress
      summary: 입금 주소 생성하기
      description: 입금 주소를 생성합니다.
      parameters:
        - *ref_36
        - *ref_37
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDepositAddressRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositAddressDTO'
        '401': *ref_38
      tags: *ref_39
    get:
      operationId: WalletsController_getDepositAddresses
      summary: 전체 입금 주소 목록 조회하기
      description: 특정 지갑에 속한 모든 입금 주소 목록을 조회합니다.
      parameters:
        - *ref_36
        - *ref_37
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: id
          required: true
          in: query
          schema:
            type: string
        - name: address
          required: true
          in: query
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: 입금 주소 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForDepositAddressDTO'
        '401': *ref_38
      tags: *ref_39
  /api/v2/btc/wallets/{walletId}/deposit-addresses/{depositAddressId}:
    get:
      operationId: WalletsController_getDepositAddress
      summary: 입금 주소 정보 조회하기
      description: 특정 입금 주소 정보를 조회합니다.
      parameters:
        - *ref_36
        - *ref_37
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: depositAddressId
          required: true
          in: path
          description: depositAddress ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositAddressDTO'
        '401': *ref_38
      tags: *ref_39
  /api/v2/btc/wallets/{walletId}/transfer:
    post:
      operationId: WalletsController_transfer
      summary: transfer
      description: transfer
      parameters:
        - *ref_36
        - *ref_37
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDTO'
        '401': *ref_38
      tags: *ref_39
  /api/v3/ethereum/coins:
    get:
      operationId: CoinsController_getCoins
      summary: 전체 코인 목록 조회하기
      description: Henesis Wallet에서 지원하는 모든 가상자산(토큰, 코인)을 조회합니다.
      parameters:
        - &ref_40
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_41
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: flag
          required: true
          in: query
          description: 비트베리 여부
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoinDTO'
        '401': &ref_42
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_43
        - coins
  /api/v3/ethereum/coins/{coinId}:
    get:
      operationId: CoinsController_getCoin
      summary: 코인 정보 조회하기
      description: Henesis Wallet에서 지원하는 특정 가상자산(토큰, 코인)을 조회합니다.
      parameters:
        - *ref_40
        - *ref_41
        - name: coinId
          required: true
          in: path
          description: Henesis에서 부여한 Coin의 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoinDTO'
        '400':
          description: 코인 정보가 없을 때 response 입니다
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoCoinException'
        '401': *ref_42
      tags: *ref_43
  /api/v3/ethereum/contract-calls:
    get:
      operationId: ContractCallsController_getCallEvents
      summary: 스마트 컨트랙트 호출 내역 조회하기
      description: 내가 발생시킨 스마트 컨트랙트 호출 내역을 조회합니다.
      parameters:
        - name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: walletId
          required: false
          in: query
          description: 지갑 ID
          schema:
            type: string
        - name: transactionId
          required: false
          in: query
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 트랜잭션 해시
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: 트랜잭션 상태
          schema:
            type: string
        - name: ticker
          required: false
          in: query
          description: 코인의 기호
          schema:
            type: string
        - name: updatedAtGte
          required: false
          in: query
          description: 'updatedAt이 해당 시점과 같거나 그보다 이후인 트랜잭션 조회 (형식: ms, UNIX time) '
          schema:
            type: string
        - name: updatedAtLt
          required: false
          in: query
          description: 'updatedAt이 해당 시점보다 이전인 트랜잭션 조회 (형식: ms, UNIX time) '
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15)'
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForContractCallsDTO'
        '400':
          description: 올바르지 않은 트랜잭션 상태(status)로 요청하면 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidStatusException'
        '401':
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags:
        - contract-calls
  /api/v3/ethereum/transfers:
    get:
      operationId: TransfersController_getTransfers
      summary: 전체 입출금 목록 조회하기
      description: 모든 지갑의 가상자산 입출금 내역을 조회합니다.
      parameters:
        - name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: ticker
          required: false
          in: query
          description: 코인의 기호
          schema:
            type: string
        - name: depositAddressId
          required: false
          in: query
          description: 입금 주소 ID
          schema:
            type: string
        - name: walletId
          required: false
          in: query
          description: 지갑 ID
          schema:
            type: string
        - name: transactionId
          required: false
          in: query
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 트랜잭션 해시
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: 트랜잭션 상태
          schema:
            type: string
        - name: updatedAtGte
          required: false
          in: query
          description: 'updatedAt이 해당 시점과 같거나 그보다 이후인 트랜잭션 조회 (형식: ms, UNIX time) '
          schema:
            type: string
        - name: updatedAtLt
          required: false
          in: query
          description: 'updatedAt이 해당 시점보다 이전인 트랜잭션 조회 (형식: ms, UNIX time) '
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15)'
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForTransferDTO'
        '400':
          description: 올바르지 않은 트랜잭션 상태(status)로 요청하면 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidStatusException'
        '401':
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags:
        - transfers
  /api/v3/ethereum/fee-wallet/balance:
    get:
      operationId: FeeWalletController_getBalance
      summary: 수수료 지갑 잔고 조회하기
      description: 수수료 지갑의 잔액을 조회합니다.
      parameters:
        - name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceDTO'
        '401':
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags:
        - fee-wallet
  /api/v3/ethereum/transactions/{transactionId}:
    get:
      operationId: TransactionsController_getTransaction
      summary: 개별 트랜잭션 조회하기
      description: 내가 발생시킨 특정 트랜잭션의 정보를 조회합니다.
      parameters:
        - &ref_44
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_45
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: transactionId
          required: true
          in: path
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '400':
          description: transaction id가 없을 때 발생합니다
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionIdNotFoundException'
        '401': &ref_46
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_47
        - transactions
  /api/v3/ethereum/transactions:
    get:
      operationId: TransactionsController_getTransactions
      summary: 트랜잭션 목록 조회하기
      description: 트랜잭션 목록을 조회합니다.
      parameters:
        - *ref_44
        - *ref_45
        - name: address
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: toAddress
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: fromAddress
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: start
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: end
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
        - name: statuses
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: array
            items:
              type: string
        - name: types
          required: false
          in: query
          description: 트랜잭션 종류
          schema:
            type: array
            items:
              type: string
        - name: keyId
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForTransactionDTO'
        '401': *ref_46
      tags: *ref_47
  /api/v3/ethereum/wallets:
    get:
      operationId: WalletsController_getWallets
      summary: 전체 지갑 목록 조회하기
      description: 모든 지갑의 목록을 조회합니다.
      parameters:
        - &ref_48
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_49
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer \<TOKEN\>
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: 지갑 이름
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletDTO'
        '401': &ref_50
          description: 아래와 같은 인증 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
      tags: &ref_51
        - wallets
  /api/v3/ethereum/wallets/{walletId}:
    get:
      operationId: WalletsController_getWallet
      summary: 지갑 정보 조회하기
      description: 특정 지갑의 정보를 조회합니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/balance:
    get:
      operationId: WalletsController_getBalanceOfWallet
      summary: 지갑 잔고 조회하기
      description: 특정 지갑의 잔고를 조회합니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: ticker
          required: false
          in: query
          description: 코인의 기호
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/name:
    patch:
      operationId: WalletsController_changeWalletName
      summary: 지갑 이름 변경하기
      description: 특정 지갑의 이름을 변경합니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeWalletNameRequestDTO'
      responses:
        '200':
          description: ''
        '204':
          description: ''
        '400':
          description: 다음과 같은 bad request 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WalletNotFoundException'
                  - $ref: '#/components/schemas/NoWalletNameException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/transfer:
    post:
      operationId: WalletsController_sendCoin
      summary: 지갑에서 코인 전송하기
      description: 특정 지갑에서 가상자산을 송금합니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendCoinRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/contract-calls:
    post:
      operationId: WalletsController_callContract
      summary: 지갑에서 스마트 컨트랙트 호출하기
      description: 특정 지갑에서 일반적인 스마트 컨트랙트 함수를 호출하는 트랜잭션을 발생시킵니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/transactions/{transactionId}/replace:
    post:
      operationId: WalletsController_replaceTransaction
      summary: 트랜잭션 교체
      description: 트랜잭션을 교체합니다
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: transactionId
          required: true
          in: path
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceTransactionRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/flush:
    post:
      operationId: WalletsController_flush
      summary: 입금 주소 잔액을 모두 끌어오기
      description: 원화 입금 주소의 특정 코인/토큰 잔액을 모두 상위의 지갑으로 끌어옵니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFlushRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/transactions/{transactionId}/resend:
    post:
      operationId: WalletsController_resendTransaction
      summary: 트랜잭션 다시 전송하기
      description: 네트워크 사정 등으로 채굴이 지연됐을때, 블록체인에 트랜잭션을 다시 전송합니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: transactionId
          required: true
          in: path
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인상 트랜잭션 해시와 다른
            개념입니다.)
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/deposit-addresses:
    get:
      operationId: WalletsController_getDepositAddresses
      summary: 전체 입금 주소 목록 조회하기
      description: 특정 지갑에 속한 모든 입금 주소 조회합니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: 지갑 이름
          schema:
            type: string
        - name: address
          required: false
          in: query
          description: 입금 주소
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15)'
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForDepositAddressDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
    post:
      operationId: WalletsController_createDepositAddress
      summary: 입금 주소 생성하기
      description: 특정 지갑 하위에 새로운 입금 주소 생성합니다
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDepositAddressRequestDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositAddressDTO'
        '400':
          description: 해당하는 id의 지갑이 없을 때 발생합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/deposit-addresses/{depositAddressId}:
    get:
      operationId: WalletsController_getDepositAddress
      summary: 입금 주소 정보 조회하기
      description: 특정 입금 주소를 조회합니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: depositAddressId
          required: true
          in: path
          description: 입금 주소 ID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositAddressDTO'
        '400':
          description: 다음과 같은 bad request 에러가 발생할 수 있습니다.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WalletNotFoundException'
                  - $ref: '#/components/schemas/DepositAddressNotFoundException'
        '401': *ref_50
      tags: *ref_51
  /api/v3/ethereum/wallets/{walletId}/deposit-addresses/{depositAddressId}/balance:
    get:
      operationId: WalletsController_getBalanceOfDepositAddress
      summary: 입금 주소 잔고 조회하기
      description: 특정 입금 주소의 잔액을 조회합니다.
      parameters:
        - *ref_48
        - *ref_49
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: depositAddressId
          required: true
          in: path
          description: 입금 주소 ID
          schema:
            type: string
        - name: ticker
          required: false
          in: query
          description: 코인의 기호
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceDTO'
        '401': *ref_50
      tags: *ref_51
