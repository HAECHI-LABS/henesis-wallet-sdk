openapi: 3.0.0
info:
  title: BITCOIN-CASH
  description: Henesis API Proxy - v3 - bitcoin-cash OpenAPI Documentation
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:3000
components:
  schemas:
    TransactionDto:
      type: object
      properties:
        id:
          type: string
          description: >-
            트랜잭션 ID (Henesis Wallet에서 부여하는 트랜잭션의 고유 ID입니다. 온체인 트랜잭션 해시와 다른
            개념입니다.)
          example: beb70cf0b90afb6683ece78e0dfb4a140cf498310b833eea8092b5edd271e9c3
        transactionHash:
          type: string
          description: 온체인 트랜잭션 해시
          example: 612f7cf11aeec9441a8758781b5549fc720500023f663e118b14ee2b712d216c
        blockNumber:
          type: string
          description: '트랜잭션이 담긴 블록 번호 (형식: 10진법) (트랜잭션 상태가 PENDING일 때는 존재하지 않습니다.)'
          example: '1934835'
        amount:
          type: string
          description: '전송할 암호화폐의 양 (단위: satoshi) (형식: 10진법)'
          example: '750'
        feeAmount:
          type: string
          description: 수수료 금액
          example: '750'
        createdAt:
          type: string
          description: '트랜잭션이 생성된 시간 (형식: ms, UNIX time)'
          example: '1620042742913'
        updatedAt:
          type: string
          description: '트랜잭션 상태가 마지막으로 변경된 시간 (형식: ms, UNIX time)'
          example: '1620042742915'
        hex:
          type: string
          description: 블록체인에 전파된 트랜잭션 Body의 raw data
          example: >-
            0x01000000010ef55b0654efc9f632a73e0d545e185914f81eefddcd161d1340f94b5bb6c91e01000000fdfe0000483045022100c6b5167d4d66bf4f712830b31795df3ffc34074a672906069b6e5299c61e12f90220364bb6b5b4ab5ff528aef2d82b08a7cbb582d1b6f135200800afbad08807d65101483045022100f73667aca7a6434e6c86e6d1970ccefe6e052554c45b6df64b86c48bd9428006022024d98a75217ad115985d961def56ab36e8d23dafe487c47ff39b445094574f54014c695221039c12b1681bc9506b4304a5d7f3933e55c0b55e3a90e47a0b94a6d209afb6173021039c3e34050a735c790a0d8ce39c52165dd11af50ee252a6b83dceaddd02b33b9d21039c882ac166fcb0056145105e18982b7c3b9dc5b54e1ac430f65e7c998ccfdb7d53aeffffffff02010000000000000017a91400271eec282b0368c3a2948145f7ae034fcd1d0787c54319000000000017a9147cfdc2bc58a9cad8b1cae530ce784f828c03a9ca8700000000
        outputs:
          description: 트랜잭션을 통해 생성된 UTXO의 Output
          example: &ref_0
            - address: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
              amount: '1'
              transactionId: beb70cf0b90afb6683ece78e0dfb4a140cf498310b833eea8092b5edd271e9c3
              outputIndex: 0
              scriptPubKey: '0xa91400271eec282b0368c3a2948145f7ae034fcd1d0787'
              isChange: false
          type: array
          items:
            type: array
      required:
        - id
        - transactionHash
        - amount
        - createdAt
        - updatedAt
        - hex
        - outputs
    TransferDTO:
      type: object
      properties:
        transaction:
          description: 해당 전송(Transfer)이 포함되는 온체인 트랜잭션의 정보
          example: &ref_1
            id: beb70cf0b90afb6683ece78e0dfb4a140cf498310b833eea8092b5edd271e9c3
            transactionHash: 612f7cf11aeec9441a8758781b5549fc720500023f663e118b14ee2b712d216c
            blockNumber: '1934835'
            amount: '750'
            feeAmount: '750'
            createdAt: '1620042742913'
            updatedAt: '1620042742915'
            hex: >-
              0x01000000010ef55b0654efc9f632a73e0d545e185914f81eefddcd161d1340f94b5bb6c91e01000000fdfe0000483045022100c6b5167d4d66bf4f712830b31795df3ffc34074a672906069b6e5299c61e12f90220364bb6b5b4ab5ff528aef2d82b08a7cbb582d1b6f135200800afbad08807d65101483045022100f73667aca7a6434e6c86e6d1970ccefe6e052554c45b6df64b86c48bd9428006022024d98a75217ad115985d961def56ab36e8d23dafe487c47ff39b445094574f54014c695221039c12b1681bc9506b4304a5d7f3933e55c0b55e3a90e47a0b94a6d209afb6173021039c3e34050a735c790a0d8ce39c52165dd11af50ee252a6b83dceaddd02b33b9d21039c882ac166fcb0056145105e18982b7c3b9dc5b54e1ac430f65e7c998ccfdb7d53aeffffffff02010000000000000017a91400271eec282b0368c3a2948145f7ae034fcd1d0787c54319000000000017a9147cfdc2bc58a9cad8b1cae530ce784f828c03a9ca8700000000
            outputs: *ref_0
          allOf:
            - $ref: '#/components/schemas/TransactionDto'
        walletId:
          type: string
          description: 지갑 ID
          example: 2d855c98bd183d14f7d9a1805327afff
        amount:
          type: string
          description: '전송할 암호화폐의 양 (단위: satoshi) (형식: 10진법)'
          example: '1'
        status:
          type: string
          description: 전송(Transfer) 상태
          example: PENDING
          enum:
            - PENDING_APPROVAL
            - REJECTED
            - PENDING
            - MINED
            - CONFIRMED
            - REQUESTED
        id:
          type: string
          description: 전송(Transfer) ID
          example: 7074aaec177f02559e1b1c9e63816359
        outputIndex:
          type: number
          description: >-
            해당 전송(Transfer)을 통해 발생한 Output이 같은 트랜잭션에 포함된 여러 UTXO 중에 몇 번째 Output
            인지?
          example: 0
        receivedAt:
          type: string
          description: 받는 주소
          example: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
        sendTo:
          type: string
          description: 보내는 주소
          example: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
        withdrawalApprovalId:
          type: string
          description: 출금 한도를 초과할 경우 생성된 출금 요청의 ID
          example: 7074aaec177f02559e1b1c9e63816359
        type:
          type: string
          description: 전송(Transfer) 타입
          example: WITHDRAWAL
          enum:
            - WITHDRAWAL
            - DEPOSIT
        createdAt:
          type: string
          description: '전송(Transfer)이 생성된 시간 (형식: ms, UNIX time)'
          example: '1620042252520'
        updatedAt:
          type: string
          description: '전송(Transfer) 상태가 마지막으로 변경된 시간 (형식: ms, UNIX time)'
          example: '1620042252520'
        feeAmount:
          type: string
          description: '사용된 수수료의 양 (단위: satoshi) (형식: 10진법)'
          example: '750'
        confirmation:
          type: string
          description: 트랜잭션 전파 이후 채굴 된 블록 갯수
          example: '35387'
        metadata:
          type: string
          description: 기타 정보 기록용 메타 데이터 (255자 제한)
          example: metadata
      required:
        - walletId
        - amount
        - status
        - id
        - withdrawalApprovalId
        - type
        - createdAt
        - updatedAt
        - confirmation
    PaginationMetadata:
      type: object
      properties:
        nextUrl:
          type: string
          description: 다음 pagination url
          example: http://localhost:3000/api/v3/ethereum/transfers?page=2
        previousUrl:
          type: string
          description: 이전 pagination url
          example: http://localhost:3000/api/v3/ethereum/transfers?page=1
        totalCount:
          type: number
          description: 총 갯수
          example: 5
      required:
        - nextUrl
        - previousUrl
        - totalCount
    GetManyResponseForTransferDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/TransferDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    KeyDTO:
      type: object
      properties:
        address:
          type: string
          description: Key의 주소 (BCH 지갑은 값이 없습니다)
          example: undefined
        pub:
          type: string
          description: Key의 Pub Key 정보
          example: 0x030b5dm1690572a06c07181cfp29a30dfa057ea66c16e06313nd66404299b22041
        keyFile:
          type: string
          description: Key의 Private Key를 암호화한 값
          example: >-
            {\"iv\":\"fk4p/phK72zMXOf7NzHr8g==\",\"v\":1,\"iter\":10000,\"ks\":256,\"ts\":64,\"mode\":\"ccm\",\"adata\":\"\",\"cipher\":\"aes\",\"salt\":\"31kCiaHPr1P=\",\"ct\":\"B2x5ckUjDMs+oU+jF5C8BkT3DHAfIw9gFEETSBI3U1+8xkUC6KQSh132Q2SZewhkYezSh3A8kKir36hDttFCy58o9GDHR+SO\"}
      required:
        - pub
    WalletDTO:
      type: object
      properties:
        id:
          type: string
          description: 지갑 ID
          example: cce4f485764767f256155390873668b3
        name:
          type: string
          description: 지갑 이름
          example: bitcoincash-wallet
        address:
          type: string
          description: 지갑 주소
          example: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
        encryptionKey:
          type: string
          description: 지갑 비밀번호를 복구하기 위해, 암호화하는 데에 쓰인 키
          example: b72355635b2f8db7d603a73gd37r2460e28d93ad42df6ba85fff4b18fe374ae3
        createdAt:
          type: string
          description: 지갑 생성 시간
          example: '1599116198762'
        updatedAt:
          type: string
          description: 지갑 변경 시간
          example: '1599116198962'
        status:
          type: string
          description: 지갑 상태
          example: ACTIVE
          enum:
            - ACTIVE
            - CREATING
            - FAILED
            - INACTIVE
        orgId:
          type: string
          description: 지갑이 속한 팀(Org)의 ID
          example: 0u1a431da7361na9e75648180bbd4fbc
        accountKey:
          description: 지갑을 서명할 때 쓰이는 Account Key 정보
          example: &ref_11
            address: undefined
            pub: >-
              0x030b5dm1690572a06c07181cfp29a30dfa057ea66c16e06313nd66404299b22041
            keyFile: >-
              {\"iv\":\"fk4p/phK72zMXOf7NzHr8g==\",\"v\":1,\"iter\":10000,\"ks\":256,\"ts\":64,\"mode\":\"ccm\",\"adata\":\"\",\"cipher\":\"aes\",\"salt\":\"31kCiaHPr1P=\",\"ct\":\"B2x5ckUjDMs+oU+jF5C8BkT3DHAfIw9gFEETSBI3U1+8xkUC6KQSh132Q2SZewhkYezSh3A8kKir36hDttFCy58o9GDHR+SO\"}
          allOf:
            - $ref: '#/components/schemas/KeyDTO'
        whitelistActivated:
          type: boolean
          description: 출금 주소 화이트리스팅의 활성화 유무
          example: false
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - status
        - whitelistActivated
    BalanceDTO:
      type: object
      properties:
        coinType:
          type: string
          description: 암호화폐 타입
          example: BCH
        amount:
          type: string
          description: '총 잔액 (확정된 잔액) (단위: satoshi) (형식: 10진법)'
          example: '59023730737'
        spendableAmount:
          type: string
          description: '출금 가능한 잔액 (= 총 잔액 - 확정되지 않은 출금 요청액) (단위: satoshi) (형식: 10진법)'
          example: '59023730737'
        aggregatedAmount:
          type: string
          description: >-
            마스터 지갑의 잔액과 하위 입금 주소들의 잔액을 모두 합한 잔액 (= 마스터 지갑 잔액 + 입금 주소 1 잔액 + 입금
            주소 2 잔액 + ...) (단위: satoshi) (형식: 10진법)
          example: '59023730737'
        name:
          type: string
          description: 암호화폐 이름
          example: 비트코인캐시
        symbol:
          type: string
          description: 암호화폐 심볼 (ticker)
          example: BCH
      required:
        - coinType
        - amount
        - name
        - symbol
    ChangeWalletNameRequestDTO:
      type: object
      properties:
        name:
          type: string
          description: 변경할 지갑 이름
          example: walletName
      required:
        - name
    CreateDepositAddressRequestDTO:
      type: object
      properties:
        name:
          type: string
          description: 입금 주소 이름
          example: bch-depositAddress
      required:
        - name
    DepositAddressDTO:
      type: object
      properties:
        id:
          type: string
          description: 입금 주소 ID
          example: 94fd6a94ed199d660acf55e2f2943a7c
        name:
          type: string
          description: 입금 주소 이름
          example: cash
        address:
          type: string
          description: 입금 주소
          example: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
        pub:
          type: string
          description: 입금 주소 공개키
          example: '0x022bf2a47ce5027831a3587ecd9f2d0d1e590a227ea576f61598ee84405e0479c1'
        createdAt:
          type: string
          description: '입금 주소 생성 시간 (단위: ms, UNIX time)'
          example: '1620041696849'
      required:
        - id
        - name
        - address
        - pub
        - createdAt
    GetManyResponseForDepositAddressDTO:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/DepositAddressDTO'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - results
    TransferRequestDTO:
      type: object
      properties:
        to:
          type: string
          description: 받을 주소
          example: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
        amount:
          type: string
          description: '보낼 금액 (단위: satoshi) (10진법)'
          example: '15'
        passphrase:
          type: string
          description: 비밀번호
          example: passphrase
        feeRate:
          type: string
          description: '트랜잭션 byte당 지불할 fee 가격 (단위: satoshi) (10진범)'
          example: '219'
        metadata:
          type: string
          description: 기타 정보 기록용 메타 데이터 (255자 제한)
          example: metadata
      required:
        - to
        - amount
        - passphrase
    InvalidAccessIpException:
      type: object
      properties:
        message:
          type: string
          description: API 에러 메시지
          example: ip '106.101.128.133' is not allowed
        code:
          type: number
          description: 헤네시스 API 에러 코드
          example: 4008
      required:
        - message
        - code
    InvalidAccessTokenException:
      type: object
      properties:
        message:
          type: string
          description: API 에러 메시지
          example: expired or invalid access token and signature
        code:
          type: number
          description: 헤네시스 API 에러 코드
          example: 4001
      required:
        - message
        - code
    AccessTokenNotProvidedException:
      type: object
      properties:
        message:
          type: string
          description: API 에러 메시지
          example: access token not provided
        code:
          type: number
          description: 헤네시스 API 에러 코드
          example: 4001
      required:
        - message
        - code
paths:
  /api/v3/bitcoin-cash/transfers:
    get:
      operationId: bitcoin-cash-TransfersController_getTransfers
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 입출금 내역 조회하기
      description: 입출금 내역을 조회합니다.
      parameters:
        - &ref_2
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_3
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer <TOKEN\>
          schema:
            example: Bearer <TOKEN>
            default: 'Bearer '
            type: string
        - name: type
          required: false
          in: query
          description: 거래 타입
          schema:
            type: string
        - name: walletId
          required: false
          in: query
          description: 지갑 ID
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: 거래 상태
          schema:
            type: string
        - name: address
          required: false
          in: query
          description: 입금 주소 또는 출금 주소
          schema:
            type: string
        - name: transactionHash
          required: false
          in: query
          description: 온체인 트랜잭션 해시
          schema:
            type: string
        - name: updatedAtGte
          required: false
          in: query
          description: 전송 상태가 마지막으로 변경된 시점(updatedAt)이 특정 시점과 같거나 그보다 이후인 전송 내역 조회
          schema:
            type: string
        - name: updatedAtLt
          required: false
          in: query
          description: 전송 상태가 마지막으로 변경된 시점(updatedAt)이 특정 시점보다 이전인 전송 내역 조회
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15)'
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForTransferDTO'
              example:
                pagination: &ref_13
                  nextUrl: http://localhost:3000/api/v3/bch/transfers?page=2
                  previousUrl: http://localhost:3000/api/v3/bch/transfers?page=1
                  totalCount: 5
                results:
                  - &ref_4
                    transaction: *ref_1
                    walletId: 2d855c98bd183d14f7d9a1805327afff
                    amount: '1'
                    status: PENDING
                    id: 7074aaec177f02559e1b1c9e63816359
                    outputIndex: 0
                    receivedAt: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
                    sendTo: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
                    withdrawalApprovalId: 7074aaec177f02559e1b1c9e63816359
                    type: WITHDRAWAL
                    createdAt: '1620042252520'
                    updatedAt: '1620042252520'
                    feeAmount: '750'
                    confirmation: '35387'
                    metadata: metadata
          description: ''
        '401': &ref_5
          description: 인증이 실패했을 때 발생하는 에러입니다.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
              examples:
                InvalidAccessTokenException:
                  value: &ref_6
                    message: expired or invalid access token and signature
                    code: 4001
                AccessTokenNotProvidedException:
                  value: &ref_7
                    message: access token not provided
                    code: 4001
                InvalidAccessIpException:
                  value: &ref_8
                    message: ip '106.101.128.133' is not allowed
                    code: 4008
      tags:
        - transfers
  /api/v3/bitcoin-cash/transfers/{transferId}:
    get:
      operationId: bitcoin-cash-TransfersController_getTransfer
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 특정 입출금 내역 조회하기
      description: 특정 입출금 내역을 조회합니다.
      parameters:
        - *ref_2
        - *ref_3
        - name: transferId
          required: true
          in: path
          description: 전송(Transfer) ID
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDTO'
              example: *ref_4
          description: ''
        '401': *ref_5
      tags:
        - transfers
  /api/v3/bitcoin-cash/wallets:
    get:
      operationId: bitcoin-cash-WalletsController_getWallets
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 전체 지갑 목록 조회하기
      description: 전체 지갑 목록을 조회합니다.
      parameters:
        - &ref_9
          name: X-Henesis-Secret
          in: header
          description: 대시보드를 통해 발급 받은 API Secret을 입력합니다.
          schema:
            type: string
        - &ref_10
          name: Authorization
          in: header
          description: 대시보드를 통해 발급 받은 Access Token을 입력합니다. e.g. Bearer <TOKEN\>
          schema:
            example: Bearer <TOKEN>
            default: 'Bearer '
            type: string
        - name: name
          required: false
          in: query
          description: 지갑 이름
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletDTO'
          description: ''
        '401': &ref_12
          description: 인증이 실패했을 때 발생하는 에러입니다.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InvalidAccessTokenException'
                  - $ref: '#/components/schemas/AccessTokenNotProvidedException'
                  - $ref: '#/components/schemas/InvalidAccessIpException'
              examples:
                InvalidAccessTokenException:
                  value: *ref_6
                AccessTokenNotProvidedException:
                  value: *ref_7
                InvalidAccessIpException:
                  value: *ref_8
      tags:
        - wallets
  /api/v3/bitcoin-cash/wallets/{walletId}:
    get:
      operationId: bitcoin-cash-WalletsController_getWallet
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 지갑 정보 조회하기
      description: 특정 지갑의 상세 정보를 조회합니다.
      parameters:
        - *ref_9
        - *ref_10
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDTO'
              example:
                id: cce4f485764767f256155390873668b3
                name: bitcoincash-wallet
                address: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
                encryptionKey: >-
                  b72355635b2f8db7d603a73gd37r2460e28d93ad42df6ba85fff4b18fe374ae3
                createdAt: '1599116198762'
                updatedAt: '1599116198962'
                status: ACTIVE
                orgId: 0u1a431da7361na9e75648180bbd4fbc
                accountKey: *ref_11
                whitelistActivated: false
          description: ''
        '401': *ref_12
      tags:
        - wallets
  /api/v3/bitcoin-cash/wallets/{walletId}/name:
    patch:
      operationId: bitcoin-cash-WalletsController_changeWalletName
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 지갑 정보 변경하기
      description: 특정 지갑의 이름을 변경합니다.
      parameters:
        - *ref_9
        - *ref_10
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeWalletNameRequestDTO'
      responses:
        '204':
          description: ''
        '401': *ref_12
      tags:
        - wallets
  /api/v3/bitcoin-cash/wallets/{walletId}/balance:
    get:
      operationId: bitcoin-cash-WalletsController_getWalletBalance
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 지갑 잔고 조회하기
      description: 특정 지갑의 잔고를 변경합니다.
      parameters:
        - *ref_9
        - *ref_10
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceDTO'
          description: ''
        '401': *ref_12
      tags:
        - wallets
  /api/v3/bitcoin-cash/wallets/{walletId}/deposit-addresses:
    post:
      operationId: bitcoin-cash-WalletsController_createDepositAddress
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 입금 주소 생성하기
      description: 입금 주소를 생성합니다.
      parameters:
        - *ref_9
        - *ref_10
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDepositAddressRequestDTO'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositAddressDTO'
              example: &ref_14
                id: 94fd6a94ed199d660acf55e2f2943a7c
                name: cash
                address: bitcoincash:qz9ew4c9l7rt0rqv6ced08k0wts6vxwuqvvuuv2szl
                pub: >-
                  0x022bf2a47ce5027831a3587ecd9f2d0d1e590a227ea576f61598ee84405e0479c1
                createdAt: '1620041696849'
          description: ''
        '401': *ref_12
      tags:
        - wallets
    get:
      operationId: bitcoin-cash-WalletsController_getDepositAddresses
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 전체 입금 주소 목록 조회하기
      description: 특정 지갑에 속한 모든 입금 주소 목록을 조회합니다.
      parameters:
        - *ref_9
        - *ref_10
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: id
          required: false
          in: query
          description: 입금 주소 ID
          schema:
            type: string
        - name: address
          required: false
          in: query
          description: 입금 주소
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: 입금 주소 이름
          schema:
            type: string
        - name: size
          required: false
          in: query
          description: '한 번의 요청으로 반환되는 응답의 개수 (기본값: 15)'
          schema:
            type: number
        - name: page
          required: false
          in: query
          description: 몇 번째 페이지를 조회할 것인지? (페이지는 0부터 시작)
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetManyResponseForDepositAddressDTO'
              example:
                pagination: *ref_13
                results:
                  - *ref_14
          description: ''
        '401': *ref_12
      tags:
        - wallets
  /api/v3/bitcoin-cash/wallets/{walletId}/deposit-addresses/{depositAddressId}:
    get:
      operationId: bitcoin-cash-WalletsController_getDepositAddress
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 입금 주소 정보 조회하기
      description: 특정 입금 주소 정보를 조회합니다.
      parameters:
        - *ref_9
        - *ref_10
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
        - name: depositAddressId
          required: true
          in: path
          description: 입금 주소 ID
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositAddressDTO'
              example: *ref_14
          description: ''
        '401': *ref_12
      tags:
        - wallets
  /api/v3/bitcoin-cash/wallets/{walletId}/transfer:
    post:
      operationId: bitcoin-cash-WalletsController_transfer
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - node
          - java
          - python
          - go
      summary: 지갑에서 코인 전송하기
      description: 특정 지갑에서 가상자산을 전송합니다.
      parameters:
        - *ref_9
        - *ref_10
        - name: walletId
          required: true
          in: path
          description: 지갑 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequestDTO'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDTO'
              example: *ref_1
          description: ''
        '401': *ref_12
      tags:
        - wallets
